
ADC_2senzori_19.03_2019_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031dc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003378  08003378  00013378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080033d8  080033d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080033e0  080033e0  000133e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080033e4  080033e4  000133e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  080033e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c4  20000074  0800345c  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000138  0800345c  00020138  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c858  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001c5b  00000000  00000000  0002c8fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000294b  00000000  00000000  0002e557  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000590  00000000  00000000  00030ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000718  00000000  00000000  00031438  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000343c  00000000  00000000  00031b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000025d1  00000000  00000000  00034f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003755d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000127c  00000000  00000000  000375dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800335c 	.word	0x0800335c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	0800335c 	.word	0x0800335c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_uldivmod>:
 8000b48:	b953      	cbnz	r3, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4a:	b94a      	cbnz	r2, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	bf08      	it	eq
 8000b50:	2800      	cmpeq	r0, #0
 8000b52:	bf1c      	itt	ne
 8000b54:	f04f 31ff 	movne.w	r1, #4294967295
 8000b58:	f04f 30ff 	movne.w	r0, #4294967295
 8000b5c:	f000 b97a 	b.w	8000e54 <__aeabi_idiv0>
 8000b60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b68:	f000 f806 	bl	8000b78 <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4770      	bx	lr

08000b78 <__udivmoddi4>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	460d      	mov	r5, r1
 8000b80:	4604      	mov	r4, r0
 8000b82:	9e08      	ldr	r6, [sp, #32]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d151      	bne.n	8000c2c <__udivmoddi4+0xb4>
 8000b88:	428a      	cmp	r2, r1
 8000b8a:	4617      	mov	r7, r2
 8000b8c:	d96d      	bls.n	8000c6a <__udivmoddi4+0xf2>
 8000b8e:	fab2 fe82 	clz	lr, r2
 8000b92:	f1be 0f00 	cmp.w	lr, #0
 8000b96:	d00b      	beq.n	8000bb0 <__udivmoddi4+0x38>
 8000b98:	f1ce 0c20 	rsb	ip, lr, #32
 8000b9c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000ba0:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000ba4:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ba8:	ea4c 0c05 	orr.w	ip, ip, r5
 8000bac:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bb0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000bb4:	0c25      	lsrs	r5, r4, #16
 8000bb6:	fbbc f8fa 	udiv	r8, ip, sl
 8000bba:	fa1f f987 	uxth.w	r9, r7
 8000bbe:	fb0a cc18 	mls	ip, sl, r8, ip
 8000bc2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000bc6:	fb08 f309 	mul.w	r3, r8, r9
 8000bca:	42ab      	cmp	r3, r5
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x6c>
 8000bce:	19ed      	adds	r5, r5, r7
 8000bd0:	f108 32ff 	add.w	r2, r8, #4294967295
 8000bd4:	f080 8123 	bcs.w	8000e1e <__udivmoddi4+0x2a6>
 8000bd8:	42ab      	cmp	r3, r5
 8000bda:	f240 8120 	bls.w	8000e1e <__udivmoddi4+0x2a6>
 8000bde:	f1a8 0802 	sub.w	r8, r8, #2
 8000be2:	443d      	add	r5, r7
 8000be4:	1aed      	subs	r5, r5, r3
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb5 f0fa 	udiv	r0, r5, sl
 8000bec:	fb0a 5510 	mls	r5, sl, r0, r5
 8000bf0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bf4:	fb00 f909 	mul.w	r9, r0, r9
 8000bf8:	45a1      	cmp	r9, r4
 8000bfa:	d909      	bls.n	8000c10 <__udivmoddi4+0x98>
 8000bfc:	19e4      	adds	r4, r4, r7
 8000bfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c02:	f080 810a 	bcs.w	8000e1a <__udivmoddi4+0x2a2>
 8000c06:	45a1      	cmp	r9, r4
 8000c08:	f240 8107 	bls.w	8000e1a <__udivmoddi4+0x2a2>
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	443c      	add	r4, r7
 8000c10:	eba4 0409 	sub.w	r4, r4, r9
 8000c14:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d061      	beq.n	8000ce2 <__udivmoddi4+0x16a>
 8000c1e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c22:	2300      	movs	r3, #0
 8000c24:	6034      	str	r4, [r6, #0]
 8000c26:	6073      	str	r3, [r6, #4]
 8000c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2c:	428b      	cmp	r3, r1
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0xc8>
 8000c30:	2e00      	cmp	r6, #0
 8000c32:	d054      	beq.n	8000cde <__udivmoddi4+0x166>
 8000c34:	2100      	movs	r1, #0
 8000c36:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c40:	fab3 f183 	clz	r1, r3
 8000c44:	2900      	cmp	r1, #0
 8000c46:	f040 808e 	bne.w	8000d66 <__udivmoddi4+0x1ee>
 8000c4a:	42ab      	cmp	r3, r5
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xdc>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80fa 	bhi.w	8000e48 <__udivmoddi4+0x2d0>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb65 0503 	sbc.w	r5, r5, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	46ac      	mov	ip, r5
 8000c5e:	2e00      	cmp	r6, #0
 8000c60:	d03f      	beq.n	8000ce2 <__udivmoddi4+0x16a>
 8000c62:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	b912      	cbnz	r2, 8000c72 <__udivmoddi4+0xfa>
 8000c6c:	2701      	movs	r7, #1
 8000c6e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c72:	fab7 fe87 	clz	lr, r7
 8000c76:	f1be 0f00 	cmp.w	lr, #0
 8000c7a:	d134      	bne.n	8000ce6 <__udivmoddi4+0x16e>
 8000c7c:	1beb      	subs	r3, r5, r7
 8000c7e:	0c3a      	lsrs	r2, r7, #16
 8000c80:	fa1f fc87 	uxth.w	ip, r7
 8000c84:	2101      	movs	r1, #1
 8000c86:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c8a:	0c25      	lsrs	r5, r4, #16
 8000c8c:	fb02 3318 	mls	r3, r2, r8, r3
 8000c90:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c94:	fb0c f308 	mul.w	r3, ip, r8
 8000c98:	42ab      	cmp	r3, r5
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0x134>
 8000c9c:	19ed      	adds	r5, r5, r7
 8000c9e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x132>
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	f200 80d1 	bhi.w	8000e4c <__udivmoddi4+0x2d4>
 8000caa:	4680      	mov	r8, r0
 8000cac:	1aed      	subs	r5, r5, r3
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb5 f0f2 	udiv	r0, r5, r2
 8000cb4:	fb02 5510 	mls	r5, r2, r0, r5
 8000cb8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000cbc:	fb0c fc00 	mul.w	ip, ip, r0
 8000cc0:	45a4      	cmp	ip, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x15c>
 8000cc4:	19e4      	adds	r4, r4, r7
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x15a>
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	f200 80b8 	bhi.w	8000e42 <__udivmoddi4+0x2ca>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 040c 	sub.w	r4, r4, ip
 8000cd8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cdc:	e79d      	b.n	8000c1a <__udivmoddi4+0xa2>
 8000cde:	4631      	mov	r1, r6
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	f1ce 0420 	rsb	r4, lr, #32
 8000cea:	fa05 f30e 	lsl.w	r3, r5, lr
 8000cee:	fa07 f70e 	lsl.w	r7, r7, lr
 8000cf2:	fa20 f804 	lsr.w	r8, r0, r4
 8000cf6:	0c3a      	lsrs	r2, r7, #16
 8000cf8:	fa25 f404 	lsr.w	r4, r5, r4
 8000cfc:	ea48 0803 	orr.w	r8, r8, r3
 8000d00:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d04:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d08:	fb02 4411 	mls	r4, r2, r1, r4
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d14:	fb01 f30c 	mul.w	r3, r1, ip
 8000d18:	42ab      	cmp	r3, r5
 8000d1a:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x1bc>
 8000d20:	19ed      	adds	r5, r5, r7
 8000d22:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d26:	f080 808a 	bcs.w	8000e3e <__udivmoddi4+0x2c6>
 8000d2a:	42ab      	cmp	r3, r5
 8000d2c:	f240 8087 	bls.w	8000e3e <__udivmoddi4+0x2c6>
 8000d30:	3902      	subs	r1, #2
 8000d32:	443d      	add	r5, r7
 8000d34:	1aeb      	subs	r3, r5, r3
 8000d36:	fa1f f588 	uxth.w	r5, r8
 8000d3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d3e:	fb02 3310 	mls	r3, r2, r0, r3
 8000d42:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d46:	fb00 f30c 	mul.w	r3, r0, ip
 8000d4a:	42ab      	cmp	r3, r5
 8000d4c:	d907      	bls.n	8000d5e <__udivmoddi4+0x1e6>
 8000d4e:	19ed      	adds	r5, r5, r7
 8000d50:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d54:	d26f      	bcs.n	8000e36 <__udivmoddi4+0x2be>
 8000d56:	42ab      	cmp	r3, r5
 8000d58:	d96d      	bls.n	8000e36 <__udivmoddi4+0x2be>
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	443d      	add	r5, r7
 8000d5e:	1aeb      	subs	r3, r5, r3
 8000d60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d64:	e78f      	b.n	8000c86 <__udivmoddi4+0x10e>
 8000d66:	f1c1 0720 	rsb	r7, r1, #32
 8000d6a:	fa22 f807 	lsr.w	r8, r2, r7
 8000d6e:	408b      	lsls	r3, r1
 8000d70:	fa05 f401 	lsl.w	r4, r5, r1
 8000d74:	ea48 0303 	orr.w	r3, r8, r3
 8000d78:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d7c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d80:	40fd      	lsrs	r5, r7
 8000d82:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d86:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d8a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d8e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d92:	fa1f f883 	uxth.w	r8, r3
 8000d96:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d9a:	fb09 f408 	mul.w	r4, r9, r8
 8000d9e:	42ac      	cmp	r4, r5
 8000da0:	fa02 f201 	lsl.w	r2, r2, r1
 8000da4:	fa00 fa01 	lsl.w	sl, r0, r1
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x244>
 8000daa:	18ed      	adds	r5, r5, r3
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	d243      	bcs.n	8000e3a <__udivmoddi4+0x2c2>
 8000db2:	42ac      	cmp	r4, r5
 8000db4:	d941      	bls.n	8000e3a <__udivmoddi4+0x2c2>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	441d      	add	r5, r3
 8000dbc:	1b2d      	subs	r5, r5, r4
 8000dbe:	fa1f fe8e 	uxth.w	lr, lr
 8000dc2:	fbb5 f0fc 	udiv	r0, r5, ip
 8000dc6:	fb0c 5510 	mls	r5, ip, r0, r5
 8000dca:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000dce:	fb00 f808 	mul.w	r8, r0, r8
 8000dd2:	45a0      	cmp	r8, r4
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x26e>
 8000dd6:	18e4      	adds	r4, r4, r3
 8000dd8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ddc:	d229      	bcs.n	8000e32 <__udivmoddi4+0x2ba>
 8000dde:	45a0      	cmp	r8, r4
 8000de0:	d927      	bls.n	8000e32 <__udivmoddi4+0x2ba>
 8000de2:	3802      	subs	r0, #2
 8000de4:	441c      	add	r4, r3
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	eba4 0408 	sub.w	r4, r4, r8
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	454c      	cmp	r4, r9
 8000df4:	46c6      	mov	lr, r8
 8000df6:	464d      	mov	r5, r9
 8000df8:	d315      	bcc.n	8000e26 <__udivmoddi4+0x2ae>
 8000dfa:	d012      	beq.n	8000e22 <__udivmoddi4+0x2aa>
 8000dfc:	b156      	cbz	r6, 8000e14 <__udivmoddi4+0x29c>
 8000dfe:	ebba 030e 	subs.w	r3, sl, lr
 8000e02:	eb64 0405 	sbc.w	r4, r4, r5
 8000e06:	fa04 f707 	lsl.w	r7, r4, r7
 8000e0a:	40cb      	lsrs	r3, r1
 8000e0c:	431f      	orrs	r7, r3
 8000e0e:	40cc      	lsrs	r4, r1
 8000e10:	6037      	str	r7, [r6, #0]
 8000e12:	6074      	str	r4, [r6, #4]
 8000e14:	2100      	movs	r1, #0
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	e6f8      	b.n	8000c10 <__udivmoddi4+0x98>
 8000e1e:	4690      	mov	r8, r2
 8000e20:	e6e0      	b.n	8000be4 <__udivmoddi4+0x6c>
 8000e22:	45c2      	cmp	sl, r8
 8000e24:	d2ea      	bcs.n	8000dfc <__udivmoddi4+0x284>
 8000e26:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e2a:	eb69 0503 	sbc.w	r5, r9, r3
 8000e2e:	3801      	subs	r0, #1
 8000e30:	e7e4      	b.n	8000dfc <__udivmoddi4+0x284>
 8000e32:	4628      	mov	r0, r5
 8000e34:	e7d7      	b.n	8000de6 <__udivmoddi4+0x26e>
 8000e36:	4640      	mov	r0, r8
 8000e38:	e791      	b.n	8000d5e <__udivmoddi4+0x1e6>
 8000e3a:	4681      	mov	r9, r0
 8000e3c:	e7be      	b.n	8000dbc <__udivmoddi4+0x244>
 8000e3e:	4601      	mov	r1, r0
 8000e40:	e778      	b.n	8000d34 <__udivmoddi4+0x1bc>
 8000e42:	3802      	subs	r0, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	e745      	b.n	8000cd4 <__udivmoddi4+0x15c>
 8000e48:	4608      	mov	r0, r1
 8000e4a:	e708      	b.n	8000c5e <__udivmoddi4+0xe6>
 8000e4c:	f1a8 0802 	sub.w	r8, r8, #2
 8000e50:	443d      	add	r5, r7
 8000e52:	e72b      	b.n	8000cac <__udivmoddi4+0x134>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <HAL_InitTick+0x3c>)
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_InitTick+0x40>)
{
 8000e5e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e60:	7818      	ldrb	r0, [r3, #0]
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e6a:	6810      	ldr	r0, [r2, #0]
 8000e6c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e70:	f000 faa8 	bl	80013c4 <HAL_SYSTICK_Config>
 8000e74:	4604      	mov	r4, r0
 8000e76:	b958      	cbnz	r0, 8000e90 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e78:	2d0f      	cmp	r5, #15
 8000e7a:	d809      	bhi.n	8000e90 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	4629      	mov	r1, r5
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f000 fa6a 	bl	800135c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <HAL_InitTick+0x44>)
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	601d      	str	r5, [r3, #0]
 8000e8e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000e90:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000e92:	bd38      	pop	{r3, r4, r5, pc}
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <HAL_Init>:
{
 8000ea0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_Init+0x30>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000eaa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000eb2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000eba:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 fa3b 	bl	8001338 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff ffc8 	bl	8000e58 <HAL_InitTick>
  HAL_MspInit();
 8000ec8:	f001 f8c8 	bl	800205c <HAL_MspInit>
}
 8000ecc:	2000      	movs	r0, #0
 8000ece:	bd08      	pop	{r3, pc}
 8000ed0:	40023c00 	.word	0x40023c00

08000ed4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ed4:	4a03      	ldr	r2, [pc, #12]	; (8000ee4 <HAL_IncTick+0x10>)
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <HAL_IncTick+0x14>)
 8000ed8:	6811      	ldr	r1, [r2, #0]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	440b      	add	r3, r1
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	200000a4 	.word	0x200000a4
 8000ee8:	20000000 	.word	0x20000000

08000eec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000eec:	4b01      	ldr	r3, [pc, #4]	; (8000ef4 <HAL_GetTick+0x8>)
 8000eee:	6818      	ldr	r0, [r3, #0]
}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	200000a4 	.word	0x200000a4

08000ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef8:	b538      	push	{r3, r4, r5, lr}
 8000efa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff fff6 	bl	8000eec <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f00:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f02:	bf1c      	itt	ne
 8000f04:	4b05      	ldrne	r3, [pc, #20]	; (8000f1c <HAL_Delay+0x24>)
 8000f06:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000f08:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000f0a:	bf18      	it	ne
 8000f0c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f0e:	f7ff ffed 	bl	8000eec <HAL_GetTick>
 8000f12:	1b40      	subs	r0, r0, r5
 8000f14:	4284      	cmp	r4, r0
 8000f16:	d8fa      	bhi.n	8000f0e <HAL_Delay+0x16>
  {
  }
}
 8000f18:	bd38      	pop	{r3, r4, r5, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000000 	.word	0x20000000

08000f20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f20:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f22:	4604      	mov	r4, r0
 8000f24:	2800      	cmp	r0, #0
 8000f26:	f000 8099 	beq.w	800105c <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f2a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000f2c:	b923      	cbnz	r3, 8000f38 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f2e:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f30:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f34:	f001 f8da 	bl	80020ec <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f3a:	06db      	lsls	r3, r3, #27
 8000f3c:	f100 808c 	bmi.w	8001058 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f46:	f023 0302 	bic.w	r3, r3, #2
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f50:	4b43      	ldr	r3, [pc, #268]	; (8001060 <HAL_ADC_Init+0x140>)
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000f58:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	6861      	ldr	r1, [r4, #4]
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f62:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f64:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f76:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f78:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f7a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000f7e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	430a      	orrs	r2, r1
 8000f84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f86:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f88:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f96:	4933      	ldr	r1, [pc, #204]	; (8001064 <HAL_ADC_Init+0x144>)
 8000f98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f9a:	428a      	cmp	r2, r1
 8000f9c:	d050      	beq.n	8001040 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f9e:	6899      	ldr	r1, [r3, #8]
 8000fa0:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000fa4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000fa6:	6899      	ldr	r1, [r3, #8]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fac:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000fae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fba:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000fbc:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000fbe:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000fc0:	f022 0202 	bic.w	r2, r2, #2
 8000fc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000fcc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000fce:	6a22      	ldr	r2, [r4, #32]
 8000fd0:	2a00      	cmp	r2, #0
 8000fd2:	d03d      	beq.n	8001050 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000fd4:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000fd6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000fd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fdc:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000fe4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	3901      	subs	r1, #1
 8000fea:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000fee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ff2:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ff4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000ff8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ffc:	3901      	subs	r1, #1
 8000ffe:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001004:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001006:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001008:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800100c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8001014:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001016:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001018:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800101a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800101e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001020:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001022:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001024:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001028:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800102a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800102c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800102e:	f023 0303 	bic.w	r3, r3, #3
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001038:	2300      	movs	r3, #0
 800103a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800103e:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001046:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800104e:	e7b4      	b.n	8000fba <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001056:	e7ca      	b.n	8000fee <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8001058:	2001      	movs	r0, #1
 800105a:	e7ed      	b.n	8001038 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 800105c:	2001      	movs	r0, #1
}
 800105e:	bd10      	pop	{r4, pc}
 8001060:	40012300 	.word	0x40012300
 8001064:	0f000001 	.word	0x0f000001

08001068 <HAL_ADC_Start>:
{
 8001068:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800106a:	2300      	movs	r3, #0
 800106c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800106e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001072:	2b01      	cmp	r3, #1
 8001074:	d04e      	beq.n	8001114 <HAL_ADC_Start+0xac>
 8001076:	2301      	movs	r3, #1
 8001078:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800107c:	6803      	ldr	r3, [r0, #0]
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	07d1      	lsls	r1, r2, #31
 8001082:	d505      	bpl.n	8001090 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	07d2      	lsls	r2, r2, #31
 8001088:	d414      	bmi.n	80010b4 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 800108a:	2000      	movs	r0, #0
}
 800108c:	b002      	add	sp, #8
 800108e:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8001090:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001092:	4921      	ldr	r1, [pc, #132]	; (8001118 <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 8001094:	f042 0201 	orr.w	r2, r2, #1
 8001098:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800109a:	4a20      	ldr	r2, [pc, #128]	; (800111c <HAL_ADC_Start+0xb4>)
 800109c:	6812      	ldr	r2, [r2, #0]
 800109e:	fbb2 f2f1 	udiv	r2, r2, r1
 80010a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 80010a6:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 80010a8:	9a01      	ldr	r2, [sp, #4]
 80010aa:	2a00      	cmp	r2, #0
 80010ac:	d0ea      	beq.n	8001084 <HAL_ADC_Start+0x1c>
      counter--;
 80010ae:	9a01      	ldr	r2, [sp, #4]
 80010b0:	3a01      	subs	r2, #1
 80010b2:	e7f8      	b.n	80010a6 <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 80010b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80010b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80010ba:	f022 0201 	bic.w	r2, r2, #1
 80010be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010c2:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010c8:	bf41      	itttt	mi
 80010ca:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 80010cc:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80010d0:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80010d4:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010d6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80010d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010dc:	bf1c      	itt	ne
 80010de:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 80010e0:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80010e4:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010ec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010f0:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010f2:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <HAL_ADC_Start+0xb8>)
 80010f4:	6852      	ldr	r2, [r2, #4]
 80010f6:	06d2      	lsls	r2, r2, #27
 80010f8:	d108      	bne.n	800110c <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010fa:	6898      	ldr	r0, [r3, #8]
 80010fc:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001100:	d1c3      	bne.n	800108a <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	e7bf      	b.n	800108c <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800110c:	4a05      	ldr	r2, [pc, #20]	; (8001124 <HAL_ADC_Start+0xbc>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d1bb      	bne.n	800108a <HAL_ADC_Start+0x22>
 8001112:	e7f2      	b.n	80010fa <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 8001114:	2002      	movs	r0, #2
 8001116:	e7b9      	b.n	800108c <HAL_ADC_Start+0x24>
 8001118:	000f4240 	.word	0x000f4240
 800111c:	20000008 	.word	0x20000008
 8001120:	40012300 	.word	0x40012300
 8001124:	40012000 	.word	0x40012000

08001128 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8001128:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800112c:	2b01      	cmp	r3, #1
 800112e:	d017      	beq.n	8001160 <HAL_ADC_Stop+0x38>
 8001130:	2301      	movs	r3, #1
 8001132:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 8001136:	6803      	ldr	r3, [r0, #0]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	f022 0201 	bic.w	r2, r2, #1
 800113e:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	07db      	lsls	r3, r3, #31
 8001144:	d407      	bmi.n	8001156 <HAL_ADC_Stop+0x2e>
    ADC_STATE_CLR_SET(hadc->State,
 8001146:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001148:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800114c:	f023 0301 	bic.w	r3, r3, #1
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001156:	2300      	movs	r3, #0
 8001158:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800115c:	4618      	mov	r0, r3
 800115e:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8001160:	2002      	movs	r0, #2
}
 8001162:	4770      	bx	lr

08001164 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001164:	6803      	ldr	r3, [r0, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
{
 8001168:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800116a:	0556      	lsls	r6, r2, #21
{
 800116c:	4604      	mov	r4, r0
 800116e:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001170:	d50b      	bpl.n	800118a <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001172:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001174:	05d8      	lsls	r0, r3, #23
 8001176:	d508      	bpl.n	800118a <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001178:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800117a:	f043 0320 	orr.w	r3, r3, #32
 800117e:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8001180:	2300      	movs	r3, #0
 8001182:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8001186:	2001      	movs	r0, #1
 8001188:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 800118a:	f7ff feaf 	bl	8000eec <HAL_GetTick>
 800118e:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001190:	6823      	ldr	r3, [r4, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	0792      	lsls	r2, r2, #30
 8001196:	d50c      	bpl.n	80011b2 <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001198:	f06f 0212 	mvn.w	r2, #18
 800119c:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800119e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80011a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011a4:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80011ac:	d013      	beq.n	80011d6 <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 80011ae:	2000      	movs	r0, #0
 80011b0:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 80011b2:	1c69      	adds	r1, r5, #1
 80011b4:	d0ed      	beq.n	8001192 <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80011b6:	b945      	cbnz	r5, 80011ca <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 80011c0:	2300      	movs	r3, #0
 80011c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 80011c6:	2003      	movs	r0, #3
 80011c8:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80011ca:	f7ff fe8f 	bl	8000eec <HAL_GetTick>
 80011ce:	1b80      	subs	r0, r0, r6
 80011d0:	4285      	cmp	r5, r0
 80011d2:	d2dd      	bcs.n	8001190 <HAL_ADC_PollForConversion+0x2c>
 80011d4:	e7f0      	b.n	80011b8 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011d6:	69a2      	ldr	r2, [r4, #24]
 80011d8:	2a00      	cmp	r2, #0
 80011da:	d1e8      	bne.n	80011ae <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011de:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80011e2:	d002      	beq.n	80011ea <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011e4:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011e6:	055b      	lsls	r3, r3, #21
 80011e8:	d4e1      	bmi.n	80011ae <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011f0:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80011f4:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 80011f8:	d1d9      	bne.n	80011ae <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001202:	bd70      	pop	{r4, r5, r6, pc}

08001204 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001204:	6803      	ldr	r3, [r0, #0]
 8001206:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001208:	4770      	bx	lr
	...

0800120c <HAL_ADC_ConfigChannel>:
{
 800120c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800120e:	2300      	movs	r3, #0
 8001210:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001212:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001216:	2b01      	cmp	r3, #1
 8001218:	f000 8083 	beq.w	8001322 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800121c:	680d      	ldr	r5, [r1, #0]
 800121e:	6804      	ldr	r4, [r0, #0]
 8001220:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8001222:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001224:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8001226:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800122a:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 800122c:	d92a      	bls.n	8001284 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800122e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8001232:	68e7      	ldr	r7, [r4, #12]
 8001234:	3b1e      	subs	r3, #30
 8001236:	f04f 0e07 	mov.w	lr, #7
 800123a:	fa0e fe03 	lsl.w	lr, lr, r3
 800123e:	ea27 070e 	bic.w	r7, r7, lr
 8001242:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001244:	68e7      	ldr	r7, [r4, #12]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	433b      	orrs	r3, r7
 800124c:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800124e:	684a      	ldr	r2, [r1, #4]
 8001250:	2a06      	cmp	r2, #6
 8001252:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8001256:	d825      	bhi.n	80012a4 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001258:	4413      	add	r3, r2
 800125a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800125c:	1f59      	subs	r1, r3, #5
 800125e:	231f      	movs	r3, #31
 8001260:	408b      	lsls	r3, r1
 8001262:	ea27 0303 	bic.w	r3, r7, r3
 8001266:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001268:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800126a:	fa06 f101 	lsl.w	r1, r6, r1
 800126e:	4311      	orrs	r1, r2
 8001270:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001272:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <HAL_ADC_ConfigChannel+0x11c>)
 8001274:	429c      	cmp	r4, r3
 8001276:	d034      	beq.n	80012e2 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8001278:	2300      	movs	r3, #0
 800127a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800127e:	4618      	mov	r0, r3
}
 8001280:	b003      	add	sp, #12
 8001282:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001284:	6927      	ldr	r7, [r4, #16]
 8001286:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800128a:	f04f 0e07 	mov.w	lr, #7
 800128e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001292:	ea27 070e 	bic.w	r7, r7, lr
 8001296:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001298:	6927      	ldr	r7, [r4, #16]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	433b      	orrs	r3, r7
 80012a0:	6123      	str	r3, [r4, #16]
 80012a2:	e7d4      	b.n	800124e <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80012a4:	2a0c      	cmp	r2, #12
 80012a6:	d80e      	bhi.n	80012c6 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012a8:	4413      	add	r3, r2
 80012aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80012ac:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80012b0:	231f      	movs	r3, #31
 80012b2:	4093      	lsls	r3, r2
 80012b4:	ea21 0303 	bic.w	r3, r1, r3
 80012b8:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80012bc:	fa06 f202 	lsl.w	r2, r6, r2
 80012c0:	431a      	orrs	r2, r3
 80012c2:	6322      	str	r2, [r4, #48]	; 0x30
 80012c4:	e7d5      	b.n	8001272 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012c6:	4413      	add	r3, r2
 80012c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80012ca:	3b41      	subs	r3, #65	; 0x41
 80012cc:	221f      	movs	r2, #31
 80012ce:	409a      	lsls	r2, r3
 80012d0:	ea21 0202 	bic.w	r2, r1, r2
 80012d4:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012d8:	fa06 f103 	lsl.w	r1, r6, r3
 80012dc:	4311      	orrs	r1, r2
 80012de:	62e1      	str	r1, [r4, #44]	; 0x2c
 80012e0:	e7c7      	b.n	8001272 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012e2:	2d12      	cmp	r5, #18
 80012e4:	d104      	bne.n	80012f0 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012e6:	4a11      	ldr	r2, [pc, #68]	; (800132c <HAL_ADC_ConfigChannel+0x120>)
 80012e8:	6853      	ldr	r3, [r2, #4]
 80012ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012ee:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012f0:	f1a5 0310 	sub.w	r3, r5, #16
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d8bf      	bhi.n	8001278 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012f8:	4a0c      	ldr	r2, [pc, #48]	; (800132c <HAL_ADC_ConfigChannel+0x120>)
 80012fa:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012fc:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001302:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001304:	d1b8      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_ADC_ConfigChannel+0x124>)
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <HAL_ADC_ConfigChannel+0x128>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001310:	230a      	movs	r3, #10
 8001312:	4353      	muls	r3, r2
        counter--;
 8001314:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001316:	9b01      	ldr	r3, [sp, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0ad      	beq.n	8001278 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 800131c:	9b01      	ldr	r3, [sp, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	e7f8      	b.n	8001314 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 8001322:	2002      	movs	r0, #2
 8001324:	e7ac      	b.n	8001280 <HAL_ADC_ConfigChannel+0x74>
 8001326:	bf00      	nop
 8001328:	40012000 	.word	0x40012000
 800132c:	40012300 	.word	0x40012300
 8001330:	20000008 	.word	0x20000008
 8001334:	000f4240 	.word	0x000f4240

08001338 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800133a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001340:	041b      	lsls	r3, r3, #16
 8001342:	0c1b      	lsrs	r3, r3, #16
 8001344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001348:	0200      	lsls	r0, r0, #8
 800134a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001352:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001354:	60d3      	str	r3, [r2, #12]
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135e:	b530      	push	{r4, r5, lr}
 8001360:	68dc      	ldr	r4, [r3, #12]
 8001362:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001366:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	2b04      	cmp	r3, #4
 800136e:	bf28      	it	cs
 8001370:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	f04f 0501 	mov.w	r5, #1
 8001378:	fa05 f303 	lsl.w	r3, r5, r3
 800137c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001380:	bf8c      	ite	hi
 8001382:	3c03      	subhi	r4, #3
 8001384:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001386:	4019      	ands	r1, r3
 8001388:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138a:	fa05 f404 	lsl.w	r4, r5, r4
 800138e:	3c01      	subs	r4, #1
 8001390:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001392:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	ea42 0201 	orr.w	r2, r2, r1
 8001398:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	bfaf      	iteee	ge
 800139e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	f000 000f 	andlt.w	r0, r0, #15
 80013a6:	4b06      	ldrlt	r3, [pc, #24]	; (80013c0 <HAL_NVIC_SetPriority+0x64>)
 80013a8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013aa:	bfa5      	ittet	ge
 80013ac:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80013b0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80013b8:	bd30      	pop	{r4, r5, pc}
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00
 80013c0:	e000ed14 	.word	0xe000ed14

080013c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c4:	3801      	subs	r0, #1
 80013c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80013ca:	d20a      	bcs.n	80013e2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ce:	4a07      	ldr	r2, [pc, #28]	; (80013ec <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	21f0      	movs	r1, #240	; 0xf0
 80013d4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013dc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013e2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000e010 	.word	0xe000e010
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013f2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80013f4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013f6:	bf0c      	ite	eq
 80013f8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80013fc:	f022 0204 	bicne.w	r2, r2, #4
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	4770      	bx	lr
 8001404:	e000e010 	.word	0xe000e010

08001408 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001408:	4770      	bx	lr

0800140a <HAL_SYSTICK_IRQHandler>:
{
 800140a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800140c:	f7ff fffc 	bl	8001408 <HAL_SYSTICK_Callback>
 8001410:	bd08      	pop	{r3, pc}
	...

08001414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001418:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141c:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80015bc <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001420:	4a64      	ldr	r2, [pc, #400]	; (80015b4 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001422:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8001424:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001428:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800142c:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001430:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8001434:	42b7      	cmp	r7, r6
 8001436:	f040 80ad 	bne.w	8001594 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800143a:	684c      	ldr	r4, [r1, #4]
 800143c:	f024 0a10 	bic.w	sl, r4, #16
 8001440:	f1ba 0f02 	cmp.w	sl, #2
 8001444:	d116      	bne.n	8001474 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8001446:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800144a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800144e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001452:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001456:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800145a:	f04f 0e0f 	mov.w	lr, #15
 800145e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001462:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001466:	690d      	ldr	r5, [r1, #16]
 8001468:	fa05 f50b 	lsl.w	r5, r5, fp
 800146c:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001470:	f8cc 5020 	str.w	r5, [ip, #32]
 8001474:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001478:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800147a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800147e:	fa05 f50c 	lsl.w	r5, r5, ip
 8001482:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001484:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001488:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800148c:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001490:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001494:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001498:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800149c:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 800149e:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014a2:	d815      	bhi.n	80014d0 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80014a4:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014a8:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ac:	68cd      	ldr	r5, [r1, #12]
 80014ae:	fa05 fa0c 	lsl.w	sl, r5, ip
 80014b2:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80014b6:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80014ba:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014be:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80014c6:	fa0e fe03 	lsl.w	lr, lr, r3
 80014ca:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80014ce:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80014d0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014d2:	9d00      	ldr	r5, [sp, #0]
 80014d4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d6:	688f      	ldr	r7, [r1, #8]
 80014d8:	fa07 f70c 	lsl.w	r7, r7, ip
 80014dc:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80014de:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e0:	00e5      	lsls	r5, r4, #3
 80014e2:	d557      	bpl.n	8001594 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e4:	f04f 0b00 	mov.w	fp, #0
 80014e8:	f8cd b00c 	str.w	fp, [sp, #12]
 80014ec:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014f0:	4d31      	ldr	r5, [pc, #196]	; (80015b8 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80014f6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80014fa:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80014fe:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001502:	9703      	str	r7, [sp, #12]
 8001504:	9f03      	ldr	r7, [sp, #12]
 8001506:	f023 0703 	bic.w	r7, r3, #3
 800150a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800150e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001512:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001516:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800151a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800151e:	f04f 0e0f 	mov.w	lr, #15
 8001522:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001526:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001528:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152c:	d039      	beq.n	80015a2 <HAL_GPIO_Init+0x18e>
 800152e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001532:	42a8      	cmp	r0, r5
 8001534:	d037      	beq.n	80015a6 <HAL_GPIO_Init+0x192>
 8001536:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800153a:	42a8      	cmp	r0, r5
 800153c:	d035      	beq.n	80015aa <HAL_GPIO_Init+0x196>
 800153e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001542:	42a8      	cmp	r0, r5
 8001544:	d033      	beq.n	80015ae <HAL_GPIO_Init+0x19a>
 8001546:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800154a:	42a8      	cmp	r0, r5
 800154c:	bf14      	ite	ne
 800154e:	2507      	movne	r5, #7
 8001550:	2504      	moveq	r5, #4
 8001552:	fa05 f50c 	lsl.w	r5, r5, ip
 8001556:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800155a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800155c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800155e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001560:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001564:	bf0c      	ite	eq
 8001566:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001568:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800156a:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800156c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800156e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001572:	bf0c      	ite	eq
 8001574:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001576:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001578:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800157a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800157c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001580:	bf0c      	ite	eq
 8001582:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001584:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001586:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001588:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800158a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800158c:	bf54      	ite	pl
 800158e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001590:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001592:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001594:	3301      	adds	r3, #1
 8001596:	2b10      	cmp	r3, #16
 8001598:	f47f af47 	bne.w	800142a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800159c:	b005      	add	sp, #20
 800159e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015a2:	465d      	mov	r5, fp
 80015a4:	e7d5      	b.n	8001552 <HAL_GPIO_Init+0x13e>
 80015a6:	2501      	movs	r5, #1
 80015a8:	e7d3      	b.n	8001552 <HAL_GPIO_Init+0x13e>
 80015aa:	2502      	movs	r5, #2
 80015ac:	e7d1      	b.n	8001552 <HAL_GPIO_Init+0x13e>
 80015ae:	2503      	movs	r5, #3
 80015b0:	e7cf      	b.n	8001552 <HAL_GPIO_Init+0x13e>
 80015b2:	bf00      	nop
 80015b4:	40013c00 	.word	0x40013c00
 80015b8:	40020000 	.word	0x40020000
 80015bc:	40023800 	.word	0x40023800

080015c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015c0:	b10a      	cbz	r2, 80015c6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015c2:	6181      	str	r1, [r0, #24]
 80015c4:	4770      	bx	lr
 80015c6:	0409      	lsls	r1, r1, #16
 80015c8:	e7fb      	b.n	80015c2 <HAL_GPIO_WritePin+0x2>
	...

080015cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015d0:	4604      	mov	r4, r0
 80015d2:	b918      	cbnz	r0, 80015dc <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80015d4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80015d6:	b002      	add	sp, #8
 80015d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015dc:	6803      	ldr	r3, [r0, #0]
 80015de:	07dd      	lsls	r5, r3, #31
 80015e0:	d410      	bmi.n	8001604 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	0798      	lsls	r0, r3, #30
 80015e6:	d458      	bmi.n	800169a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e8:	6823      	ldr	r3, [r4, #0]
 80015ea:	071a      	lsls	r2, r3, #28
 80015ec:	f100 809a 	bmi.w	8001724 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f0:	6823      	ldr	r3, [r4, #0]
 80015f2:	075b      	lsls	r3, r3, #29
 80015f4:	f100 80b8 	bmi.w	8001768 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f8:	69a2      	ldr	r2, [r4, #24]
 80015fa:	2a00      	cmp	r2, #0
 80015fc:	f040 8119 	bne.w	8001832 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001600:	2000      	movs	r0, #0
 8001602:	e7e8      	b.n	80015d6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001604:	4ba6      	ldr	r3, [pc, #664]	; (80018a0 <HAL_RCC_OscConfig+0x2d4>)
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	f002 020c 	and.w	r2, r2, #12
 800160c:	2a04      	cmp	r2, #4
 800160e:	d007      	beq.n	8001620 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001616:	2a08      	cmp	r2, #8
 8001618:	d10a      	bne.n	8001630 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	0259      	lsls	r1, r3, #9
 800161e:	d507      	bpl.n	8001630 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	4b9f      	ldr	r3, [pc, #636]	; (80018a0 <HAL_RCC_OscConfig+0x2d4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	039a      	lsls	r2, r3, #14
 8001626:	d5dc      	bpl.n	80015e2 <HAL_RCC_OscConfig+0x16>
 8001628:	6863      	ldr	r3, [r4, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1d9      	bne.n	80015e2 <HAL_RCC_OscConfig+0x16>
 800162e:	e7d1      	b.n	80015d4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001630:	6863      	ldr	r3, [r4, #4]
 8001632:	4d9b      	ldr	r5, [pc, #620]	; (80018a0 <HAL_RCC_OscConfig+0x2d4>)
 8001634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001638:	d111      	bne.n	800165e <HAL_RCC_OscConfig+0x92>
 800163a:	682b      	ldr	r3, [r5, #0]
 800163c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001640:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001642:	f7ff fc53 	bl	8000eec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001646:	4d96      	ldr	r5, [pc, #600]	; (80018a0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001648:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	682b      	ldr	r3, [r5, #0]
 800164c:	039b      	lsls	r3, r3, #14
 800164e:	d4c8      	bmi.n	80015e2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001650:	f7ff fc4c 	bl	8000eec <HAL_GetTick>
 8001654:	1b80      	subs	r0, r0, r6
 8001656:	2864      	cmp	r0, #100	; 0x64
 8001658:	d9f7      	bls.n	800164a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800165a:	2003      	movs	r0, #3
 800165c:	e7bb      	b.n	80015d6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800165e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001662:	d104      	bne.n	800166e <HAL_RCC_OscConfig+0xa2>
 8001664:	682b      	ldr	r3, [r5, #0]
 8001666:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800166a:	602b      	str	r3, [r5, #0]
 800166c:	e7e5      	b.n	800163a <HAL_RCC_OscConfig+0x6e>
 800166e:	682a      	ldr	r2, [r5, #0]
 8001670:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001674:	602a      	str	r2, [r5, #0]
 8001676:	682a      	ldr	r2, [r5, #0]
 8001678:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800167c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1df      	bne.n	8001642 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001682:	f7ff fc33 	bl	8000eec <HAL_GetTick>
 8001686:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001688:	682b      	ldr	r3, [r5, #0]
 800168a:	039f      	lsls	r7, r3, #14
 800168c:	d5a9      	bpl.n	80015e2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800168e:	f7ff fc2d 	bl	8000eec <HAL_GetTick>
 8001692:	1b80      	subs	r0, r0, r6
 8001694:	2864      	cmp	r0, #100	; 0x64
 8001696:	d9f7      	bls.n	8001688 <HAL_RCC_OscConfig+0xbc>
 8001698:	e7df      	b.n	800165a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800169a:	4b81      	ldr	r3, [pc, #516]	; (80018a0 <HAL_RCC_OscConfig+0x2d4>)
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	f012 0f0c 	tst.w	r2, #12
 80016a2:	d007      	beq.n	80016b4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016aa:	2a08      	cmp	r2, #8
 80016ac:	d111      	bne.n	80016d2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	025e      	lsls	r6, r3, #9
 80016b2:	d40e      	bmi.n	80016d2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b4:	4b7a      	ldr	r3, [pc, #488]	; (80018a0 <HAL_RCC_OscConfig+0x2d4>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	0795      	lsls	r5, r2, #30
 80016ba:	d502      	bpl.n	80016c2 <HAL_RCC_OscConfig+0xf6>
 80016bc:	68e2      	ldr	r2, [r4, #12]
 80016be:	2a01      	cmp	r2, #1
 80016c0:	d188      	bne.n	80015d4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	6921      	ldr	r1, [r4, #16]
 80016c6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80016ca:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80016ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d0:	e78a      	b.n	80015e8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016d2:	68e2      	ldr	r2, [r4, #12]
 80016d4:	4b73      	ldr	r3, [pc, #460]	; (80018a4 <HAL_RCC_OscConfig+0x2d8>)
 80016d6:	b1b2      	cbz	r2, 8001706 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80016d8:	2201      	movs	r2, #1
 80016da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016dc:	f7ff fc06 	bl	8000eec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e0:	4d6f      	ldr	r5, [pc, #444]	; (80018a0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80016e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e4:	682b      	ldr	r3, [r5, #0]
 80016e6:	0798      	lsls	r0, r3, #30
 80016e8:	d507      	bpl.n	80016fa <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ea:	682b      	ldr	r3, [r5, #0]
 80016ec:	6922      	ldr	r2, [r4, #16]
 80016ee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80016f2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80016f6:	602b      	str	r3, [r5, #0]
 80016f8:	e776      	b.n	80015e8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016fa:	f7ff fbf7 	bl	8000eec <HAL_GetTick>
 80016fe:	1b80      	subs	r0, r0, r6
 8001700:	2802      	cmp	r0, #2
 8001702:	d9ef      	bls.n	80016e4 <HAL_RCC_OscConfig+0x118>
 8001704:	e7a9      	b.n	800165a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001706:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001708:	f7ff fbf0 	bl	8000eec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170c:	4d64      	ldr	r5, [pc, #400]	; (80018a0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800170e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001710:	682b      	ldr	r3, [r5, #0]
 8001712:	0799      	lsls	r1, r3, #30
 8001714:	f57f af68 	bpl.w	80015e8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001718:	f7ff fbe8 	bl	8000eec <HAL_GetTick>
 800171c:	1b80      	subs	r0, r0, r6
 800171e:	2802      	cmp	r0, #2
 8001720:	d9f6      	bls.n	8001710 <HAL_RCC_OscConfig+0x144>
 8001722:	e79a      	b.n	800165a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001724:	6962      	ldr	r2, [r4, #20]
 8001726:	4b60      	ldr	r3, [pc, #384]	; (80018a8 <HAL_RCC_OscConfig+0x2dc>)
 8001728:	b17a      	cbz	r2, 800174a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800172e:	f7ff fbdd 	bl	8000eec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001732:	4d5b      	ldr	r5, [pc, #364]	; (80018a0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001734:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001736:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001738:	079f      	lsls	r7, r3, #30
 800173a:	f53f af59 	bmi.w	80015f0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800173e:	f7ff fbd5 	bl	8000eec <HAL_GetTick>
 8001742:	1b80      	subs	r0, r0, r6
 8001744:	2802      	cmp	r0, #2
 8001746:	d9f6      	bls.n	8001736 <HAL_RCC_OscConfig+0x16a>
 8001748:	e787      	b.n	800165a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800174a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800174c:	f7ff fbce 	bl	8000eec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001750:	4d53      	ldr	r5, [pc, #332]	; (80018a0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001752:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001754:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001756:	0798      	lsls	r0, r3, #30
 8001758:	f57f af4a 	bpl.w	80015f0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800175c:	f7ff fbc6 	bl	8000eec <HAL_GetTick>
 8001760:	1b80      	subs	r0, r0, r6
 8001762:	2802      	cmp	r0, #2
 8001764:	d9f6      	bls.n	8001754 <HAL_RCC_OscConfig+0x188>
 8001766:	e778      	b.n	800165a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001768:	4b4d      	ldr	r3, [pc, #308]	; (80018a0 <HAL_RCC_OscConfig+0x2d4>)
 800176a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800176c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001770:	d128      	bne.n	80017c4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	9201      	str	r2, [sp, #4]
 8001774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001776:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800177a:	641a      	str	r2, [r3, #64]	; 0x40
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001786:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001788:	4d48      	ldr	r5, [pc, #288]	; (80018ac <HAL_RCC_OscConfig+0x2e0>)
 800178a:	682b      	ldr	r3, [r5, #0]
 800178c:	05d9      	lsls	r1, r3, #23
 800178e:	d51b      	bpl.n	80017c8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001790:	68a3      	ldr	r3, [r4, #8]
 8001792:	4d43      	ldr	r5, [pc, #268]	; (80018a0 <HAL_RCC_OscConfig+0x2d4>)
 8001794:	2b01      	cmp	r3, #1
 8001796:	d127      	bne.n	80017e8 <HAL_RCC_OscConfig+0x21c>
 8001798:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80017a0:	f7ff fba4 	bl	8000eec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a4:	4d3e      	ldr	r5, [pc, #248]	; (80018a0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80017a6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017ae:	079b      	lsls	r3, r3, #30
 80017b0:	d539      	bpl.n	8001826 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80017b2:	2e00      	cmp	r6, #0
 80017b4:	f43f af20 	beq.w	80015f8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b8:	4a39      	ldr	r2, [pc, #228]	; (80018a0 <HAL_RCC_OscConfig+0x2d4>)
 80017ba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80017bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
 80017c2:	e719      	b.n	80015f8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80017c4:	2600      	movs	r6, #0
 80017c6:	e7df      	b.n	8001788 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017c8:	682b      	ldr	r3, [r5, #0]
 80017ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ce:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80017d0:	f7ff fb8c 	bl	8000eec <HAL_GetTick>
 80017d4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d6:	682b      	ldr	r3, [r5, #0]
 80017d8:	05da      	lsls	r2, r3, #23
 80017da:	d4d9      	bmi.n	8001790 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017dc:	f7ff fb86 	bl	8000eec <HAL_GetTick>
 80017e0:	1bc0      	subs	r0, r0, r7
 80017e2:	2802      	cmp	r0, #2
 80017e4:	d9f7      	bls.n	80017d6 <HAL_RCC_OscConfig+0x20a>
 80017e6:	e738      	b.n	800165a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e8:	2b05      	cmp	r3, #5
 80017ea:	d104      	bne.n	80017f6 <HAL_RCC_OscConfig+0x22a>
 80017ec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	672b      	str	r3, [r5, #112]	; 0x70
 80017f4:	e7d0      	b.n	8001798 <HAL_RCC_OscConfig+0x1cc>
 80017f6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80017f8:	f022 0201 	bic.w	r2, r2, #1
 80017fc:	672a      	str	r2, [r5, #112]	; 0x70
 80017fe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001800:	f022 0204 	bic.w	r2, r2, #4
 8001804:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1ca      	bne.n	80017a0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800180a:	f7ff fb6f 	bl	8000eec <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001812:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001814:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001816:	0798      	lsls	r0, r3, #30
 8001818:	d5cb      	bpl.n	80017b2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800181a:	f7ff fb67 	bl	8000eec <HAL_GetTick>
 800181e:	1bc0      	subs	r0, r0, r7
 8001820:	4540      	cmp	r0, r8
 8001822:	d9f7      	bls.n	8001814 <HAL_RCC_OscConfig+0x248>
 8001824:	e719      	b.n	800165a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001826:	f7ff fb61 	bl	8000eec <HAL_GetTick>
 800182a:	1bc0      	subs	r0, r0, r7
 800182c:	4540      	cmp	r0, r8
 800182e:	d9bd      	bls.n	80017ac <HAL_RCC_OscConfig+0x1e0>
 8001830:	e713      	b.n	800165a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001832:	4d1b      	ldr	r5, [pc, #108]	; (80018a0 <HAL_RCC_OscConfig+0x2d4>)
 8001834:	68ab      	ldr	r3, [r5, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b08      	cmp	r3, #8
 800183c:	f43f aeca 	beq.w	80015d4 <HAL_RCC_OscConfig+0x8>
 8001840:	4e1b      	ldr	r6, [pc, #108]	; (80018b0 <HAL_RCC_OscConfig+0x2e4>)
 8001842:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001844:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001846:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001848:	d134      	bne.n	80018b4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800184a:	f7ff fb4f 	bl	8000eec <HAL_GetTick>
 800184e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001850:	682b      	ldr	r3, [r5, #0]
 8001852:	0199      	lsls	r1, r3, #6
 8001854:	d41e      	bmi.n	8001894 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001856:	6a22      	ldr	r2, [r4, #32]
 8001858:	69e3      	ldr	r3, [r4, #28]
 800185a:	4313      	orrs	r3, r2
 800185c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800185e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001862:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001864:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001868:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186a:	4c0d      	ldr	r4, [pc, #52]	; (80018a0 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800186c:	0852      	lsrs	r2, r2, #1
 800186e:	3a01      	subs	r2, #1
 8001870:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001874:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001876:	2301      	movs	r3, #1
 8001878:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800187a:	f7ff fb37 	bl	8000eec <HAL_GetTick>
 800187e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001880:	6823      	ldr	r3, [r4, #0]
 8001882:	019a      	lsls	r2, r3, #6
 8001884:	f53f aebc 	bmi.w	8001600 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff fb30 	bl	8000eec <HAL_GetTick>
 800188c:	1b40      	subs	r0, r0, r5
 800188e:	2802      	cmp	r0, #2
 8001890:	d9f6      	bls.n	8001880 <HAL_RCC_OscConfig+0x2b4>
 8001892:	e6e2      	b.n	800165a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001894:	f7ff fb2a 	bl	8000eec <HAL_GetTick>
 8001898:	1bc0      	subs	r0, r0, r7
 800189a:	2802      	cmp	r0, #2
 800189c:	d9d8      	bls.n	8001850 <HAL_RCC_OscConfig+0x284>
 800189e:	e6dc      	b.n	800165a <HAL_RCC_OscConfig+0x8e>
 80018a0:	40023800 	.word	0x40023800
 80018a4:	42470000 	.word	0x42470000
 80018a8:	42470e80 	.word	0x42470e80
 80018ac:	40007000 	.word	0x40007000
 80018b0:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80018b4:	f7ff fb1a 	bl	8000eec <HAL_GetTick>
 80018b8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ba:	682b      	ldr	r3, [r5, #0]
 80018bc:	019b      	lsls	r3, r3, #6
 80018be:	f57f ae9f 	bpl.w	8001600 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c2:	f7ff fb13 	bl	8000eec <HAL_GetTick>
 80018c6:	1b00      	subs	r0, r0, r4
 80018c8:	2802      	cmp	r0, #2
 80018ca:	d9f6      	bls.n	80018ba <HAL_RCC_OscConfig+0x2ee>
 80018cc:	e6c5      	b.n	800165a <HAL_RCC_OscConfig+0x8e>
 80018ce:	bf00      	nop

080018d0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d0:	4913      	ldr	r1, [pc, #76]	; (8001920 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80018d2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d4:	688b      	ldr	r3, [r1, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d003      	beq.n	80018e6 <HAL_RCC_GetSysClockFreq+0x16>
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d003      	beq.n	80018ea <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018e2:	4810      	ldr	r0, [pc, #64]	; (8001924 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80018e4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80018e6:	4810      	ldr	r0, [pc, #64]	; (8001928 <HAL_RCC_GetSysClockFreq+0x58>)
 80018e8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018ea:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ec:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ee:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018f0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f4:	bf14      	ite	ne
 80018f6:	480c      	ldrne	r0, [pc, #48]	; (8001928 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f8:	480a      	ldreq	r0, [pc, #40]	; (8001924 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018fa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80018fe:	bf18      	it	ne
 8001900:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001902:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001906:	fba1 0100 	umull	r0, r1, r1, r0
 800190a:	f7ff f91d 	bl	8000b48 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <HAL_RCC_GetSysClockFreq+0x50>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001916:	3301      	adds	r3, #1
 8001918:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800191a:	fbb0 f0f3 	udiv	r0, r0, r3
 800191e:	bd08      	pop	{r3, pc}
 8001920:	40023800 	.word	0x40023800
 8001924:	00f42400 	.word	0x00f42400
 8001928:	007a1200 	.word	0x007a1200

0800192c <HAL_RCC_ClockConfig>:
{
 800192c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001930:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001932:	4604      	mov	r4, r0
 8001934:	b910      	cbnz	r0, 800193c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001936:	2001      	movs	r0, #1
 8001938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800193c:	4b44      	ldr	r3, [pc, #272]	; (8001a50 <HAL_RCC_ClockConfig+0x124>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	f002 020f 	and.w	r2, r2, #15
 8001944:	428a      	cmp	r2, r1
 8001946:	d328      	bcc.n	800199a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001948:	6821      	ldr	r1, [r4, #0]
 800194a:	078f      	lsls	r7, r1, #30
 800194c:	d42d      	bmi.n	80019aa <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194e:	07c8      	lsls	r0, r1, #31
 8001950:	d440      	bmi.n	80019d4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001952:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <HAL_RCC_ClockConfig+0x124>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	f002 020f 	and.w	r2, r2, #15
 800195a:	4295      	cmp	r5, r2
 800195c:	d366      	bcc.n	8001a2c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195e:	6822      	ldr	r2, [r4, #0]
 8001960:	0751      	lsls	r1, r2, #29
 8001962:	d46c      	bmi.n	8001a3e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001964:	0713      	lsls	r3, r2, #28
 8001966:	d507      	bpl.n	8001978 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001968:	4a3a      	ldr	r2, [pc, #232]	; (8001a54 <HAL_RCC_ClockConfig+0x128>)
 800196a:	6921      	ldr	r1, [r4, #16]
 800196c:	6893      	ldr	r3, [r2, #8]
 800196e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001972:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001976:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001978:	f7ff ffaa 	bl	80018d0 <HAL_RCC_GetSysClockFreq>
 800197c:	4b35      	ldr	r3, [pc, #212]	; (8001a54 <HAL_RCC_ClockConfig+0x128>)
 800197e:	4a36      	ldr	r2, [pc, #216]	; (8001a58 <HAL_RCC_ClockConfig+0x12c>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001986:	5cd3      	ldrb	r3, [r2, r3]
 8001988:	40d8      	lsrs	r0, r3
 800198a:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <HAL_RCC_ClockConfig+0x130>)
 800198c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800198e:	2000      	movs	r0, #0
 8001990:	f7ff fa62 	bl	8000e58 <HAL_InitTick>
  return HAL_OK;
 8001994:	2000      	movs	r0, #0
 8001996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199a:	b2ca      	uxtb	r2, r1
 800199c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 030f 	and.w	r3, r3, #15
 80019a4:	4299      	cmp	r1, r3
 80019a6:	d1c6      	bne.n	8001936 <HAL_RCC_ClockConfig+0xa>
 80019a8:	e7ce      	b.n	8001948 <HAL_RCC_ClockConfig+0x1c>
 80019aa:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ac:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b0:	bf1e      	ittt	ne
 80019b2:	689a      	ldrne	r2, [r3, #8]
 80019b4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80019b8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ba:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019bc:	bf42      	ittt	mi
 80019be:	689a      	ldrmi	r2, [r3, #8]
 80019c0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80019c4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	68a0      	ldr	r0, [r4, #8]
 80019ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80019ce:	4302      	orrs	r2, r0
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	e7bc      	b.n	800194e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d4:	6862      	ldr	r2, [r4, #4]
 80019d6:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <HAL_RCC_ClockConfig+0x128>)
 80019d8:	2a01      	cmp	r2, #1
 80019da:	d11d      	bne.n	8001a18 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e2:	d0a8      	beq.n	8001936 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019e4:	4e1b      	ldr	r6, [pc, #108]	; (8001a54 <HAL_RCC_ClockConfig+0x128>)
 80019e6:	68b3      	ldr	r3, [r6, #8]
 80019e8:	f023 0303 	bic.w	r3, r3, #3
 80019ec:	4313      	orrs	r3, r2
 80019ee:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80019f0:	f7ff fa7c 	bl	8000eec <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80019f8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fa:	68b3      	ldr	r3, [r6, #8]
 80019fc:	6862      	ldr	r2, [r4, #4]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a06:	d0a4      	beq.n	8001952 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a08:	f7ff fa70 	bl	8000eec <HAL_GetTick>
 8001a0c:	1bc0      	subs	r0, r0, r7
 8001a0e:	4540      	cmp	r0, r8
 8001a10:	d9f3      	bls.n	80019fa <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001a12:	2003      	movs	r0, #3
}
 8001a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a18:	1e91      	subs	r1, r2, #2
 8001a1a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a1e:	d802      	bhi.n	8001a26 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a20:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a24:	e7dd      	b.n	80019e2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a26:	f013 0f02 	tst.w	r3, #2
 8001a2a:	e7da      	b.n	80019e2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2c:	b2ea      	uxtb	r2, r5
 8001a2e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	429d      	cmp	r5, r3
 8001a38:	f47f af7d 	bne.w	8001936 <HAL_RCC_ClockConfig+0xa>
 8001a3c:	e78f      	b.n	800195e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a3e:	4905      	ldr	r1, [pc, #20]	; (8001a54 <HAL_RCC_ClockConfig+0x128>)
 8001a40:	68e0      	ldr	r0, [r4, #12]
 8001a42:	688b      	ldr	r3, [r1, #8]
 8001a44:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001a48:	4303      	orrs	r3, r0
 8001a4a:	608b      	str	r3, [r1, #8]
 8001a4c:	e78a      	b.n	8001964 <HAL_RCC_ClockConfig+0x38>
 8001a4e:	bf00      	nop
 8001a50:	40023c00 	.word	0x40023c00
 8001a54:	40023800 	.word	0x40023800
 8001a58:	08003378 	.word	0x08003378
 8001a5c:	20000008 	.word	0x20000008

08001a60 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001a60:	4b01      	ldr	r3, [pc, #4]	; (8001a68 <HAL_RCC_GetHCLKFreq+0x8>)
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000008 	.word	0x20000008

08001a6c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001a76:	5cd3      	ldrb	r3, [r2, r3]
 8001a78:	4a03      	ldr	r2, [pc, #12]	; (8001a88 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a7a:	6810      	ldr	r0, [r2, #0]
}
 8001a7c:	40d8      	lsrs	r0, r3
 8001a7e:	4770      	bx	lr
 8001a80:	40023800 	.word	0x40023800
 8001a84:	08003388 	.word	0x08003388
 8001a88:	20000008 	.word	0x20000008

08001a8c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001a96:	5cd3      	ldrb	r3, [r2, r3]
 8001a98:	4a03      	ldr	r2, [pc, #12]	; (8001aa8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a9a:	6810      	ldr	r0, [r2, #0]
}
 8001a9c:	40d8      	lsrs	r0, r3
 8001a9e:	4770      	bx	lr
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	08003388 	.word	0x08003388
 8001aa8:	20000008 	.word	0x20000008

08001aac <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001ab0:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001ab2:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001ab4:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ab6:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001ab8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001abc:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001abe:	6133      	str	r3, [r6, #16]
{
 8001ac0:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ac2:	6883      	ldr	r3, [r0, #8]
 8001ac4:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001ac6:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ac8:	4303      	orrs	r3, r0
 8001aca:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001acc:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ad0:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001ad2:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ad6:	430b      	orrs	r3, r1
 8001ad8:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001ada:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001adc:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001ade:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001ae4:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ae6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001aea:	6173      	str	r3, [r6, #20]
 8001aec:	4b7a      	ldr	r3, [pc, #488]	; (8001cd8 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001aee:	d17c      	bne.n	8001bea <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001af0:	429e      	cmp	r6, r3
 8001af2:	d003      	beq.n	8001afc <UART_SetConfig+0x50>
 8001af4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001af8:	429e      	cmp	r6, r3
 8001afa:	d144      	bne.n	8001b86 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001afc:	f7ff ffc6 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8001b00:	2519      	movs	r5, #25
 8001b02:	fb05 f300 	mul.w	r3, r5, r0
 8001b06:	6860      	ldr	r0, [r4, #4]
 8001b08:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b0c:	0040      	lsls	r0, r0, #1
 8001b0e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b12:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b16:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001b1a:	f7ff ffb7 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8001b1e:	6863      	ldr	r3, [r4, #4]
 8001b20:	4368      	muls	r0, r5
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fbb0 f7f3 	udiv	r7, r0, r3
 8001b28:	f7ff ffb0 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8001b2c:	6863      	ldr	r3, [r4, #4]
 8001b2e:	4368      	muls	r0, r5
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b36:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b3a:	fb09 7313 	mls	r3, r9, r3, r7
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	3332      	adds	r3, #50	; 0x32
 8001b42:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001b4c:	f7ff ff9e 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8001b50:	6862      	ldr	r2, [r4, #4]
 8001b52:	4368      	muls	r0, r5
 8001b54:	0052      	lsls	r2, r2, #1
 8001b56:	fbb0 faf2 	udiv	sl, r0, r2
 8001b5a:	f7ff ff97 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b5e:	6863      	ldr	r3, [r4, #4]
 8001b60:	4368      	muls	r0, r5
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b68:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b6c:	fb09 a313 	mls	r3, r9, r3, sl
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	3332      	adds	r3, #50	; 0x32
 8001b74:	fbb3 f3f9 	udiv	r3, r3, r9
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b7e:	443b      	add	r3, r7
 8001b80:	60b3      	str	r3, [r6, #8]
 8001b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b86:	f7ff ff71 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 8001b8a:	2519      	movs	r5, #25
 8001b8c:	fb05 f300 	mul.w	r3, r5, r0
 8001b90:	6860      	ldr	r0, [r4, #4]
 8001b92:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b96:	0040      	lsls	r0, r0, #1
 8001b98:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b9c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ba0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ba4:	f7ff ff62 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 8001ba8:	6863      	ldr	r3, [r4, #4]
 8001baa:	4368      	muls	r0, r5
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	fbb0 f7f3 	udiv	r7, r0, r3
 8001bb2:	f7ff ff5b 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 8001bb6:	6863      	ldr	r3, [r4, #4]
 8001bb8:	4368      	muls	r0, r5
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bc0:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bc4:	fb09 7313 	mls	r3, r9, r3, r7
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	3332      	adds	r3, #50	; 0x32
 8001bcc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001bd6:	f7ff ff49 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 8001bda:	6862      	ldr	r2, [r4, #4]
 8001bdc:	4368      	muls	r0, r5
 8001bde:	0052      	lsls	r2, r2, #1
 8001be0:	fbb0 faf2 	udiv	sl, r0, r2
 8001be4:	f7ff ff42 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 8001be8:	e7b9      	b.n	8001b5e <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001bea:	429e      	cmp	r6, r3
 8001bec:	d002      	beq.n	8001bf4 <UART_SetConfig+0x148>
 8001bee:	4b3b      	ldr	r3, [pc, #236]	; (8001cdc <UART_SetConfig+0x230>)
 8001bf0:	429e      	cmp	r6, r3
 8001bf2:	d140      	bne.n	8001c76 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001bf4:	f7ff ff4a 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8001bf8:	6867      	ldr	r7, [r4, #4]
 8001bfa:	2519      	movs	r5, #25
 8001bfc:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001c00:	fb05 f300 	mul.w	r3, r5, r0
 8001c04:	00bf      	lsls	r7, r7, #2
 8001c06:	fbb3 f3f7 	udiv	r3, r3, r7
 8001c0a:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c0e:	011f      	lsls	r7, r3, #4
 8001c10:	f7ff ff3c 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8001c14:	6863      	ldr	r3, [r4, #4]
 8001c16:	4368      	muls	r0, r5
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	fbb0 f8f3 	udiv	r8, r0, r3
 8001c1e:	f7ff ff35 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8001c22:	6863      	ldr	r3, [r4, #4]
 8001c24:	4368      	muls	r0, r5
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c2c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c30:	fb09 8313 	mls	r3, r9, r3, r8
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	3332      	adds	r3, #50	; 0x32
 8001c38:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c3c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001c40:	f7ff ff24 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8001c44:	6862      	ldr	r2, [r4, #4]
 8001c46:	4368      	muls	r0, r5
 8001c48:	0092      	lsls	r2, r2, #2
 8001c4a:	fbb0 faf2 	udiv	sl, r0, r2
 8001c4e:	f7ff ff1d 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001c52:	6863      	ldr	r3, [r4, #4]
 8001c54:	4368      	muls	r0, r5
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c5c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c60:	fb09 a313 	mls	r3, r9, r3, sl
 8001c64:	011b      	lsls	r3, r3, #4
 8001c66:	3332      	adds	r3, #50	; 0x32
 8001c68:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	ea43 0308 	orr.w	r3, r3, r8
 8001c74:	e783      	b.n	8001b7e <UART_SetConfig+0xd2>
 8001c76:	f7ff fef9 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 8001c7a:	6867      	ldr	r7, [r4, #4]
 8001c7c:	2519      	movs	r5, #25
 8001c7e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001c82:	fb05 f300 	mul.w	r3, r5, r0
 8001c86:	00bf      	lsls	r7, r7, #2
 8001c88:	fbb3 f3f7 	udiv	r3, r3, r7
 8001c8c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001c90:	011f      	lsls	r7, r3, #4
 8001c92:	f7ff feeb 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 8001c96:	6863      	ldr	r3, [r4, #4]
 8001c98:	4368      	muls	r0, r5
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	fbb0 f8f3 	udiv	r8, r0, r3
 8001ca0:	f7ff fee4 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 8001ca4:	6863      	ldr	r3, [r4, #4]
 8001ca6:	4368      	muls	r0, r5
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cae:	fbb3 f3f9 	udiv	r3, r3, r9
 8001cb2:	fb09 8313 	mls	r3, r9, r3, r8
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	3332      	adds	r3, #50	; 0x32
 8001cba:	fbb3 f3f9 	udiv	r3, r3, r9
 8001cbe:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001cc2:	f7ff fed3 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 8001cc6:	6862      	ldr	r2, [r4, #4]
 8001cc8:	4368      	muls	r0, r5
 8001cca:	0092      	lsls	r2, r2, #2
 8001ccc:	fbb0 faf2 	udiv	sl, r0, r2
 8001cd0:	f7ff fecc 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 8001cd4:	e7bd      	b.n	8001c52 <UART_SetConfig+0x1a6>
 8001cd6:	bf00      	nop
 8001cd8:	40011000 	.word	0x40011000
 8001cdc:	40011400 	.word	0x40011400

08001ce0 <HAL_UART_Init>:
{
 8001ce0:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001ce2:	4604      	mov	r4, r0
 8001ce4:	b340      	cbz	r0, 8001d38 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001ce6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001cea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cee:	b91b      	cbnz	r3, 8001cf8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001cf0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001cf4:	f000 fa1c 	bl	8002130 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001cf8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001cfa:	2324      	movs	r3, #36	; 0x24
 8001cfc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001d00:	68d3      	ldr	r3, [r2, #12]
 8001d02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d06:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001d08:	4620      	mov	r0, r4
 8001d0a:	f7ff fecf 	bl	8001aac <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d0e:	6823      	ldr	r3, [r4, #0]
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d1e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d26:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d28:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001d2a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d2c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001d2e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001d32:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001d36:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d38:	2001      	movs	r0, #1
}
 8001d3a:	bd10      	pop	{r4, pc}

08001d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d3c:	b530      	push	{r4, r5, lr}
 8001d3e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d40:	2200      	movs	r2, #0
 8001d42:	4b27      	ldr	r3, [pc, #156]	; (8001de0 <SystemClock_Config+0xa4>)
 8001d44:	9201      	str	r2, [sp, #4]
 8001d46:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001d48:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001d4c:	6419      	str	r1, [r3, #64]	; 0x40
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d50:	4924      	ldr	r1, [pc, #144]	; (8001de4 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	9301      	str	r3, [sp, #4]
 8001d58:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d5a:	9202      	str	r2, [sp, #8]
 8001d5c:	680b      	ldr	r3, [r1, #0]
 8001d5e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d66:	600b      	str	r3, [r1, #0]
 8001d68:	680b      	ldr	r3, [r1, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d6a:	920f      	str	r2, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d70:	9302      	str	r3, [sp, #8]
 8001d72:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d74:	2301      	movs	r3, #1
 8001d76:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001d78:	2310      	movs	r3, #16
 8001d7a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001d7c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d7e:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d82:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d84:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d86:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d88:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d8a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d8c:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d8e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d90:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d92:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d94:	f7ff fc1a 	bl	80015cc <HAL_RCC_OscConfig>
 8001d98:	b100      	cbz	r0, 8001d9c <SystemClock_Config+0x60>
 8001d9a:	e7fe      	b.n	8001d9a <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d9c:	230f      	movs	r3, #15
 8001d9e:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001da0:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001da6:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001da8:	4621      	mov	r1, r4
 8001daa:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dac:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dae:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001db0:	f7ff fdbc 	bl	800192c <HAL_RCC_ClockConfig>
 8001db4:	4604      	mov	r4, r0
 8001db6:	b100      	cbz	r0, 8001dba <SystemClock_Config+0x7e>
 8001db8:	e7fe      	b.n	8001db8 <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001dba:	f7ff fe51 	bl	8001a60 <HAL_RCC_GetHCLKFreq>
 8001dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001dc6:	f7ff fafd 	bl	80013c4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001dca:	4628      	mov	r0, r5
 8001dcc:	f7ff fb10 	bl	80013f0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001dd0:	4622      	mov	r2, r4
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	f7ff fac0 	bl	800135c <HAL_NVIC_SetPriority>
}
 8001ddc:	b015      	add	sp, #84	; 0x54
 8001dde:	bd30      	pop	{r4, r5, pc}
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40007000 	.word	0x40007000

08001de8 <main>:
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	; 0x28
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dec:	2400      	movs	r4, #0
  HAL_Init();
 8001dee:	f7ff f857 	bl	8000ea0 <HAL_Init>
  SystemClock_Config();
 8001df2:	f7ff ffa3 	bl	8001d3c <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df6:	4b88      	ldr	r3, [pc, #544]	; (8002018 <main+0x230>)
 8001df8:	9401      	str	r4, [sp, #4]
 8001dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001dfc:	4887      	ldr	r0, [pc, #540]	; (800201c <main+0x234>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfe:	f042 0204 	orr.w	r2, r2, #4
 8001e02:	631a      	str	r2, [r3, #48]	; 0x30
 8001e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e06:	f002 0204 	and.w	r2, r2, #4
 8001e0a:	9201      	str	r2, [sp, #4]
 8001e0c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e0e:	9402      	str	r4, [sp, #8]
 8001e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e16:	631a      	str	r2, [r3, #48]	; 0x30
 8001e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e1a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001e1e:	9202      	str	r2, [sp, #8]
 8001e20:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	9403      	str	r4, [sp, #12]
 8001e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e2e:	f002 0201 	and.w	r2, r2, #1
 8001e32:	9203      	str	r2, [sp, #12]
 8001e34:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	9404      	str	r4, [sp, #16]
 8001e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e3a:	f042 0202 	orr.w	r2, r2, #2
 8001e3e:	631a      	str	r2, [r3, #48]	; 0x30
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e46:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e48:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e4a:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e4e:	f7ff fbb7 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e56:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e58:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e5a:	4b71      	ldr	r3, [pc, #452]	; (8002020 <main+0x238>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e5c:	4871      	ldr	r0, [pc, #452]	; (8002024 <main+0x23c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e5e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	9407      	str	r4, [sp, #28]

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e62:	2501      	movs	r5, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e64:	f7ff fad6 	bl	8001414 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e68:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e6a:	486c      	ldr	r0, [pc, #432]	; (800201c <main+0x234>)
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e6c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e6e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e70:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e76:	f7ff facd 	bl	8001414 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8001e7a:	486b      	ldr	r0, [pc, #428]	; (8002028 <main+0x240>)
  huart2.Init.BaudRate = 115200;
 8001e7c:	4b6b      	ldr	r3, [pc, #428]	; (800202c <main+0x244>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7e:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001e80:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
 8001e84:	e880 0048 	stmia.w	r0, {r3, r6}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e88:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e8a:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e8c:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e8e:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e90:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e92:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e94:	f7ff ff24 	bl	8001ce0 <HAL_UART_Init>
 8001e98:	b100      	cbz	r0, 8001e9c <main+0xb4>
 8001e9a:	e7fe      	b.n	8001e9a <main+0xb2>
  hadc1.Instance = ADC1;
 8001e9c:	4c64      	ldr	r4, [pc, #400]	; (8002030 <main+0x248>)
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001e9e:	4965      	ldr	r1, [pc, #404]	; (8002034 <main+0x24c>)
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ea0:	6220      	str	r0, [r4, #32]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001ea2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ea6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001eaa:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001eae:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eb0:	4b61      	ldr	r3, [pc, #388]	; (8002038 <main+0x250>)
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001eb2:	60e0      	str	r0, [r4, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001eb4:	2602      	movs	r6, #2
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001eb6:	6320      	str	r0, [r4, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001eb8:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ENABLE;
 8001eba:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ebc:	61a5      	str	r5, [r4, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ebe:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 2;
 8001ec0:	61e6      	str	r6, [r4, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ec2:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ec4:	f7ff f82c 	bl	8000f20 <HAL_ADC_Init>
 8001ec8:	b100      	cbz	r0, 8001ecc <main+0xe4>
 8001eca:	e7fe      	b.n	8001eca <main+0xe2>
  sConfig.Channel = ADC_CHANNEL_0;
 8001ecc:	9005      	str	r0, [sp, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001ece:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ed0:	a905      	add	r1, sp, #20
 8001ed2:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 8001ed4:	9506      	str	r5, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001ed6:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ed8:	f7ff f998 	bl	800120c <HAL_ADC_ConfigChannel>
 8001edc:	b100      	cbz	r0, 8001ee0 <main+0xf8>
 8001ede:	e7fe      	b.n	8001ede <main+0xf6>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ee0:	a905      	add	r1, sp, #20
 8001ee2:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8001ee4:	9505      	str	r5, [sp, #20]
  sConfig.Rank = 2;
 8001ee6:	9606      	str	r6, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ee8:	f7ff f990 	bl	800120c <HAL_ADC_ConfigChannel>
 8001eec:	b100      	cbz	r0, 8001ef0 <main+0x108>
 8001eee:	e7fe      	b.n	8001eee <main+0x106>
	 	  distance1_cm = 98017*pow(adc1Value,-1.419);
 8001ef0:	ed9f 8b45 	vldr	d8, [pc, #276]	; 8002008 <main+0x220>
 8001ef4:	a746      	add	r7, pc, #280	; (adr r7, 8002010 <main+0x228>)
 8001ef6:	e9d7 6700 	ldrd	r6, r7, [r7]
          media_adc1=0;
 8001efa:	f8df 8150 	ldr.w	r8, [pc, #336]	; 800204c <main+0x264>
	 	  for(i=0;i<10;i++)
 8001efe:	4d4f      	ldr	r5, [pc, #316]	; (800203c <main+0x254>)
          media_adc1=0;
 8001f00:	f04f 0900 	mov.w	r9, #0
	      HAL_ADC_Start(&hadc1);
 8001f04:	4620      	mov	r0, r4
          media_adc1=0;
 8001f06:	f8c8 9000 	str.w	r9, [r8]
	      HAL_ADC_Start(&hadc1);
 8001f0a:	f7ff f8ad 	bl	8001068 <HAL_ADC_Start>
	 	  HAL_ADC_PollForConversion(&hadc1, 100);
 8001f0e:	2164      	movs	r1, #100	; 0x64
 8001f10:	4620      	mov	r0, r4
 8001f12:	f7ff f927 	bl	8001164 <HAL_ADC_PollForConversion>
	 	  for(i=0;i<10;i++)
 8001f16:	f8c5 9000 	str.w	r9, [r5]
 8001f1a:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8002050 <main+0x268>
 8001f1e:	46c2      	mov	sl, r8
 8001f20:	682b      	ldr	r3, [r5, #0]
 8001f22:	2b09      	cmp	r3, #9
 8001f24:	dd51      	ble.n	8001fca <main+0x1e2>
	 	  adc1Value=media_adc1/10;
 8001f26:	230a      	movs	r3, #10
 8001f28:	f8d8 0000 	ldr.w	r0, [r8]
 8001f2c:	fb90 f0f3 	sdiv	r0, r0, r3
 8001f30:	b280      	uxth	r0, r0
 8001f32:	f8a9 0000 	strh.w	r0, [r9]
	 	  distance1_cm = 98017*pow(adc1Value,-1.419);
 8001f36:	f7fe fa91 	bl	800045c <__aeabi_ui2d>
 8001f3a:	eeb0 1a48 	vmov.f32	s2, s16
 8001f3e:	eef0 1a68 	vmov.f32	s3, s17
 8001f42:	ec41 0b10 	vmov	d0, r0, r1
 8001f46:	f000 f99d 	bl	8002284 <pow>
 8001f4a:	4632      	mov	r2, r6
 8001f4c:	463b      	mov	r3, r7
 8001f4e:	ec51 0b10 	vmov	r0, r1, d0
 8001f52:	f7fe faf9 	bl	8000548 <__aeabi_dmul>
 8001f56:	f7fe fda7 	bl	8000aa8 <__aeabi_d2f>
 8001f5a:	4b39      	ldr	r3, [pc, #228]	; (8002040 <main+0x258>)
	 	  media_adc2=0;
 8001f5c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8002054 <main+0x26c>
	 	 for(j=0;j<10;j++)
 8001f60:	4d38      	ldr	r5, [pc, #224]	; (8002044 <main+0x25c>)
	 	  distance1_cm = 98017*pow(adc1Value,-1.419);
 8001f62:	6018      	str	r0, [r3, #0]
	 	  media_adc2=0;
 8001f64:	f04f 0900 	mov.w	r9, #0
	     HAL_ADC_PollForConversion(&hadc1, 100);
 8001f68:	2164      	movs	r1, #100	; 0x64
 8001f6a:	4620      	mov	r0, r4
	 	  media_adc2=0;
 8001f6c:	f8c8 9000 	str.w	r9, [r8]
	     HAL_ADC_PollForConversion(&hadc1, 100);
 8001f70:	f7ff f8f8 	bl	8001164 <HAL_ADC_PollForConversion>
	 	 for(j=0;j<10;j++)
 8001f74:	f8c5 9000 	str.w	r9, [r5]
 8001f78:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8002058 <main+0x270>
 8001f7c:	46c2      	mov	sl, r8
 8001f7e:	682b      	ldr	r3, [r5, #0]
 8001f80:	2b09      	cmp	r3, #9
 8001f82:	dd31      	ble.n	8001fe8 <main+0x200>
	     adc2Value=media_adc2/10;
 8001f84:	230a      	movs	r3, #10
 8001f86:	f8d8 0000 	ldr.w	r0, [r8]
 8001f8a:	fb90 f0f3 	sdiv	r0, r0, r3
 8001f8e:	b280      	uxth	r0, r0
 8001f90:	f8a9 0000 	strh.w	r0, [r9]
	     distance2_cm=98017*pow(adc2Value,-1.419);
 8001f94:	f7fe fa62 	bl	800045c <__aeabi_ui2d>
 8001f98:	eeb0 1a48 	vmov.f32	s2, s16
 8001f9c:	eef0 1a68 	vmov.f32	s3, s17
 8001fa0:	ec41 0b10 	vmov	d0, r0, r1
 8001fa4:	f000 f96e 	bl	8002284 <pow>
 8001fa8:	4632      	mov	r2, r6
 8001faa:	463b      	mov	r3, r7
 8001fac:	ec51 0b10 	vmov	r0, r1, d0
 8001fb0:	f7fe faca 	bl	8000548 <__aeabi_dmul>
 8001fb4:	f7fe fd78 	bl	8000aa8 <__aeabi_d2f>
 8001fb8:	4b23      	ldr	r3, [pc, #140]	; (8002048 <main+0x260>)
 8001fba:	6018      	str	r0, [r3, #0]
	 	 HAL_ADC_Stop(&hadc1);
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f7ff f8b3 	bl	8001128 <HAL_ADC_Stop>
	 	 HAL_Delay(100);
 8001fc2:	2064      	movs	r0, #100	; 0x64
 8001fc4:	f7fe ff98 	bl	8000ef8 <HAL_Delay>
  {
 8001fc8:	e797      	b.n	8001efa <main+0x112>
	 	  adc1Value = HAL_ADC_GetValue(&hadc1);
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f7ff f91a 	bl	8001204 <HAL_ADC_GetValue>
	 	  media_adc1 = media_adc1+adc1Value;
 8001fd0:	f8da 3000 	ldr.w	r3, [sl]
	 	  adc1Value = HAL_ADC_GetValue(&hadc1);
 8001fd4:	f8a9 0000 	strh.w	r0, [r9]
	 	  media_adc1 = media_adc1+adc1Value;
 8001fd8:	fa13 f080 	uxtah	r0, r3, r0
	 	  for(i=0;i<10;i++)
 8001fdc:	682b      	ldr	r3, [r5, #0]
	 	  media_adc1 = media_adc1+adc1Value;
 8001fde:	f8ca 0000 	str.w	r0, [sl]
	 	  for(i=0;i<10;i++)
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	602b      	str	r3, [r5, #0]
 8001fe6:	e79b      	b.n	8001f20 <main+0x138>
	 	adc2Value = HAL_ADC_GetValue(&hadc1);
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f7ff f90b 	bl	8001204 <HAL_ADC_GetValue>
	    media_adc2 = media_adc2+adc2Value;
 8001fee:	f8da 3000 	ldr.w	r3, [sl]
	 	adc2Value = HAL_ADC_GetValue(&hadc1);
 8001ff2:	f8a9 0000 	strh.w	r0, [r9]
	    media_adc2 = media_adc2+adc2Value;
 8001ff6:	fa13 f080 	uxtah	r0, r3, r0
	 	 for(j=0;j<10;j++)
 8001ffa:	682b      	ldr	r3, [r5, #0]
	    media_adc2 = media_adc2+adc2Value;
 8001ffc:	f8ca 0000 	str.w	r0, [sl]
	 	 for(j=0;j<10;j++)
 8002000:	3301      	adds	r3, #1
 8002002:	602b      	str	r3, [r5, #0]
 8002004:	e7bb      	b.n	8001f7e <main+0x196>
 8002006:	bf00      	nop
 8002008:	5810624e 	.word	0x5810624e
 800200c:	bff6b439 	.word	0xbff6b439
 8002010:	00000000 	.word	0x00000000
 8002014:	40f7ee10 	.word	0x40f7ee10
 8002018:	40023800 	.word	0x40023800
 800201c:	40020000 	.word	0x40020000
 8002020:	10210000 	.word	0x10210000
 8002024:	40020800 	.word	0x40020800
 8002028:	200000f8 	.word	0x200000f8
 800202c:	40004400 	.word	0x40004400
 8002030:	200000ac 	.word	0x200000ac
 8002034:	40012000 	.word	0x40012000
 8002038:	0f000001 	.word	0x0f000001
 800203c:	200000f4 	.word	0x200000f4
 8002040:	20000094 	.word	0x20000094
 8002044:	200000a8 	.word	0x200000a8
 8002048:	20000098 	.word	0x20000098
 800204c:	2000009c 	.word	0x2000009c
 8002050:	20000090 	.word	0x20000090
 8002054:	200000a0 	.word	0x200000a0
 8002058:	20000092 	.word	0x20000092

0800205c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800205c:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205e:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <HAL_MspInit+0x8c>)
 8002060:	2400      	movs	r4, #0
 8002062:	9400      	str	r4, [sp, #0]
 8002064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002066:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800206a:	645a      	str	r2, [r3, #68]	; 0x44
 800206c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800206e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002072:	9200      	str	r2, [sp, #0]
 8002074:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	9401      	str	r4, [sp, #4]
 8002078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800207a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800207e:	641a      	str	r2, [r3, #64]	; 0x40
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002088:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800208c:	f7ff f954 	bl	8001338 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002090:	4622      	mov	r2, r4
 8002092:	4621      	mov	r1, r4
 8002094:	f06f 000b 	mvn.w	r0, #11
 8002098:	f7ff f960 	bl	800135c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800209c:	4622      	mov	r2, r4
 800209e:	4621      	mov	r1, r4
 80020a0:	f06f 000a 	mvn.w	r0, #10
 80020a4:	f7ff f95a 	bl	800135c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80020a8:	4622      	mov	r2, r4
 80020aa:	4621      	mov	r1, r4
 80020ac:	f06f 0009 	mvn.w	r0, #9
 80020b0:	f7ff f954 	bl	800135c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80020b4:	4622      	mov	r2, r4
 80020b6:	4621      	mov	r1, r4
 80020b8:	f06f 0004 	mvn.w	r0, #4
 80020bc:	f7ff f94e 	bl	800135c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80020c0:	4622      	mov	r2, r4
 80020c2:	4621      	mov	r1, r4
 80020c4:	f06f 0003 	mvn.w	r0, #3
 80020c8:	f7ff f948 	bl	800135c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80020cc:	4622      	mov	r2, r4
 80020ce:	4621      	mov	r1, r4
 80020d0:	f06f 0001 	mvn.w	r0, #1
 80020d4:	f7ff f942 	bl	800135c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80020d8:	4622      	mov	r2, r4
 80020da:	4621      	mov	r1, r4
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295
 80020e0:	f7ff f93c 	bl	800135c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020e4:	b002      	add	sp, #8
 80020e6:	bd10      	pop	{r4, pc}
 80020e8:	40023800 	.word	0x40023800

080020ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80020ee:	6802      	ldr	r2, [r0, #0]
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <HAL_ADC_MspInit+0x3c>)
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d114      	bne.n	8002120 <HAL_ADC_MspInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020f6:	2100      	movs	r1, #0
 80020f8:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80020fc:	9100      	str	r1, [sp, #0]
 80020fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002100:	480a      	ldr	r0, [pc, #40]	; (800212c <HAL_ADC_MspInit+0x40>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002106:	645a      	str	r2, [r3, #68]	; 0x44
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	9103      	str	r1, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 800210c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002114:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002116:	2303      	movs	r3, #3
 8002118:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800211a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211c:	f7ff f97a 	bl	8001414 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002120:	b007      	add	sp, #28
 8002122:	f85d fb04 	ldr.w	pc, [sp], #4
 8002126:	bf00      	nop
 8002128:	40012000 	.word	0x40012000
 800212c:	40020000 	.word	0x40020000

08002130 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002130:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8002132:	6802      	ldr	r2, [r0, #0]
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_UART_MspInit+0x40>)
 8002136:	429a      	cmp	r2, r3
 8002138:	d117      	bne.n	800216a <HAL_UART_MspInit+0x3a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	4a0d      	ldr	r2, [pc, #52]	; (8002174 <HAL_UART_MspInit+0x44>)
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	6c11      	ldr	r1, [r2, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002142:	480d      	ldr	r0, [pc, #52]	; (8002178 <HAL_UART_MspInit+0x48>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002144:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002148:	6411      	str	r1, [r2, #64]	; 0x40
 800214a:	6c12      	ldr	r2, [r2, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	9303      	str	r3, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 800214e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002152:	9200      	str	r2, [sp, #0]
 8002154:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002156:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002158:	220c      	movs	r2, #12
 800215a:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800215c:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002160:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002164:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002166:	f7ff f955 	bl	8001414 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800216a:	b007      	add	sp, #28
 800216c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002170:	40004400 	.word	0x40004400
 8002174:	40023800 	.word	0x40023800
 8002178:	40020000 	.word	0x40020000

0800217c <NMI_Handler>:
 800217c:	4770      	bx	lr

0800217e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800217e:	e7fe      	b.n	800217e <HardFault_Handler>

08002180 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002180:	e7fe      	b.n	8002180 <MemManage_Handler>

08002182 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002182:	e7fe      	b.n	8002182 <BusFault_Handler>

08002184 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002184:	e7fe      	b.n	8002184 <UsageFault_Handler>

08002186 <SVC_Handler>:
 8002186:	4770      	bx	lr

08002188 <DebugMon_Handler>:
 8002188:	4770      	bx	lr

0800218a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800218a:	4770      	bx	lr

0800218c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800218c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800218e:	f7fe fea1 	bl	8000ed4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002196:	f7ff b938 	b.w	800140a <HAL_SYSTICK_IRQHandler>
	...

0800219c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800219c:	490f      	ldr	r1, [pc, #60]	; (80021dc <SystemInit+0x40>)
 800219e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80021a2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <SystemInit+0x44>)
 80021ac:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021ae:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80021b6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80021be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021c2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80021c4:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <SystemInit+0x48>)
 80021c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021ce:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80021d0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80021d6:	608b      	str	r3, [r1, #8]
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000ed00 	.word	0xe000ed00
 80021e0:	40023800 	.word	0x40023800
 80021e4:	24003010 	.word	0x24003010

080021e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002220 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021ee:	e003      	b.n	80021f8 <LoopCopyDataInit>

080021f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80021f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021f6:	3104      	adds	r1, #4

080021f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021f8:	480b      	ldr	r0, [pc, #44]	; (8002228 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80021fa:	4b0c      	ldr	r3, [pc, #48]	; (800222c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80021fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002200:	d3f6      	bcc.n	80021f0 <CopyDataInit>
  ldr  r2, =_sbss
 8002202:	4a0b      	ldr	r2, [pc, #44]	; (8002230 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002204:	e002      	b.n	800220c <LoopFillZerobss>

08002206 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002206:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002208:	f842 3b04 	str.w	r3, [r2], #4

0800220c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800220c:	4b09      	ldr	r3, [pc, #36]	; (8002234 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800220e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002210:	d3f9      	bcc.n	8002206 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002212:	f7ff ffc3 	bl	800219c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002216:	f000 f811 	bl	800223c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800221a:	f7ff fde5 	bl	8001de8 <main>
  bx  lr    
 800221e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002220:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002224:	080033e8 	.word	0x080033e8
  ldr  r0, =_sdata
 8002228:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800222c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002230:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8002234:	20000138 	.word	0x20000138

08002238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002238:	e7fe      	b.n	8002238 <ADC_IRQHandler>
	...

0800223c <__libc_init_array>:
 800223c:	b570      	push	{r4, r5, r6, lr}
 800223e:	4e0d      	ldr	r6, [pc, #52]	; (8002274 <__libc_init_array+0x38>)
 8002240:	4c0d      	ldr	r4, [pc, #52]	; (8002278 <__libc_init_array+0x3c>)
 8002242:	1ba4      	subs	r4, r4, r6
 8002244:	10a4      	asrs	r4, r4, #2
 8002246:	2500      	movs	r5, #0
 8002248:	42a5      	cmp	r5, r4
 800224a:	d109      	bne.n	8002260 <__libc_init_array+0x24>
 800224c:	4e0b      	ldr	r6, [pc, #44]	; (800227c <__libc_init_array+0x40>)
 800224e:	4c0c      	ldr	r4, [pc, #48]	; (8002280 <__libc_init_array+0x44>)
 8002250:	f001 f884 	bl	800335c <_init>
 8002254:	1ba4      	subs	r4, r4, r6
 8002256:	10a4      	asrs	r4, r4, #2
 8002258:	2500      	movs	r5, #0
 800225a:	42a5      	cmp	r5, r4
 800225c:	d105      	bne.n	800226a <__libc_init_array+0x2e>
 800225e:	bd70      	pop	{r4, r5, r6, pc}
 8002260:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002264:	4798      	blx	r3
 8002266:	3501      	adds	r5, #1
 8002268:	e7ee      	b.n	8002248 <__libc_init_array+0xc>
 800226a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800226e:	4798      	blx	r3
 8002270:	3501      	adds	r5, #1
 8002272:	e7f2      	b.n	800225a <__libc_init_array+0x1e>
 8002274:	080033e0 	.word	0x080033e0
 8002278:	080033e0 	.word	0x080033e0
 800227c:	080033e0 	.word	0x080033e0
 8002280:	080033e4 	.word	0x080033e4

08002284 <pow>:
 8002284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002288:	ed2d 8b04 	vpush	{d8-d9}
 800228c:	b08d      	sub	sp, #52	; 0x34
 800228e:	ec57 6b10 	vmov	r6, r7, d0
 8002292:	ec55 4b11 	vmov	r4, r5, d1
 8002296:	f000 f96f 	bl	8002578 <__ieee754_pow>
 800229a:	4bae      	ldr	r3, [pc, #696]	; (8002554 <pow+0x2d0>)
 800229c:	eeb0 8a40 	vmov.f32	s16, s0
 80022a0:	eef0 8a60 	vmov.f32	s17, s1
 80022a4:	f993 9000 	ldrsb.w	r9, [r3]
 80022a8:	f1b9 3fff 	cmp.w	r9, #4294967295
 80022ac:	4698      	mov	r8, r3
 80022ae:	d05f      	beq.n	8002370 <pow+0xec>
 80022b0:	4622      	mov	r2, r4
 80022b2:	462b      	mov	r3, r5
 80022b4:	4620      	mov	r0, r4
 80022b6:	4629      	mov	r1, r5
 80022b8:	f7fe fbe0 	bl	8000a7c <__aeabi_dcmpun>
 80022bc:	4683      	mov	fp, r0
 80022be:	2800      	cmp	r0, #0
 80022c0:	d156      	bne.n	8002370 <pow+0xec>
 80022c2:	4632      	mov	r2, r6
 80022c4:	463b      	mov	r3, r7
 80022c6:	4630      	mov	r0, r6
 80022c8:	4639      	mov	r1, r7
 80022ca:	f7fe fbd7 	bl	8000a7c <__aeabi_dcmpun>
 80022ce:	9001      	str	r0, [sp, #4]
 80022d0:	b1e8      	cbz	r0, 800230e <pow+0x8a>
 80022d2:	2200      	movs	r2, #0
 80022d4:	2300      	movs	r3, #0
 80022d6:	4620      	mov	r0, r4
 80022d8:	4629      	mov	r1, r5
 80022da:	f7fe fb9d 	bl	8000a18 <__aeabi_dcmpeq>
 80022de:	2800      	cmp	r0, #0
 80022e0:	d046      	beq.n	8002370 <pow+0xec>
 80022e2:	2301      	movs	r3, #1
 80022e4:	9302      	str	r3, [sp, #8]
 80022e6:	4b9c      	ldr	r3, [pc, #624]	; (8002558 <pow+0x2d4>)
 80022e8:	9303      	str	r3, [sp, #12]
 80022ea:	4b9c      	ldr	r3, [pc, #624]	; (800255c <pow+0x2d8>)
 80022ec:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80022f0:	2200      	movs	r2, #0
 80022f2:	f1b9 0f02 	cmp.w	r9, #2
 80022f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80022fa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80022fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002302:	d033      	beq.n	800236c <pow+0xe8>
 8002304:	a802      	add	r0, sp, #8
 8002306:	f000 ff08 	bl	800311a <matherr>
 800230a:	bb48      	cbnz	r0, 8002360 <pow+0xdc>
 800230c:	e05e      	b.n	80023cc <pow+0x148>
 800230e:	f04f 0a00 	mov.w	sl, #0
 8002312:	f04f 0b00 	mov.w	fp, #0
 8002316:	4652      	mov	r2, sl
 8002318:	465b      	mov	r3, fp
 800231a:	4630      	mov	r0, r6
 800231c:	4639      	mov	r1, r7
 800231e:	f7fe fb7b 	bl	8000a18 <__aeabi_dcmpeq>
 8002322:	ec4b ab19 	vmov	d9, sl, fp
 8002326:	2800      	cmp	r0, #0
 8002328:	d055      	beq.n	80023d6 <pow+0x152>
 800232a:	4652      	mov	r2, sl
 800232c:	465b      	mov	r3, fp
 800232e:	4620      	mov	r0, r4
 8002330:	4629      	mov	r1, r5
 8002332:	f7fe fb71 	bl	8000a18 <__aeabi_dcmpeq>
 8002336:	4680      	mov	r8, r0
 8002338:	b318      	cbz	r0, 8002382 <pow+0xfe>
 800233a:	2301      	movs	r3, #1
 800233c:	9302      	str	r3, [sp, #8]
 800233e:	4b86      	ldr	r3, [pc, #536]	; (8002558 <pow+0x2d4>)
 8002340:	9303      	str	r3, [sp, #12]
 8002342:	9b01      	ldr	r3, [sp, #4]
 8002344:	930a      	str	r3, [sp, #40]	; 0x28
 8002346:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800234a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800234e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8002352:	f1b9 0f00 	cmp.w	r9, #0
 8002356:	d0d5      	beq.n	8002304 <pow+0x80>
 8002358:	4b80      	ldr	r3, [pc, #512]	; (800255c <pow+0x2d8>)
 800235a:	2200      	movs	r2, #0
 800235c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002362:	b11b      	cbz	r3, 800236c <pow+0xe8>
 8002364:	f000 fff4 	bl	8003350 <__errno>
 8002368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800236a:	6003      	str	r3, [r0, #0]
 800236c:	ed9d 8b08 	vldr	d8, [sp, #32]
 8002370:	eeb0 0a48 	vmov.f32	s0, s16
 8002374:	eef0 0a68 	vmov.f32	s1, s17
 8002378:	b00d      	add	sp, #52	; 0x34
 800237a:	ecbd 8b04 	vpop	{d8-d9}
 800237e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002382:	ec45 4b10 	vmov	d0, r4, r5
 8002386:	f000 fec0 	bl	800310a <finite>
 800238a:	2800      	cmp	r0, #0
 800238c:	d0f0      	beq.n	8002370 <pow+0xec>
 800238e:	4652      	mov	r2, sl
 8002390:	465b      	mov	r3, fp
 8002392:	4620      	mov	r0, r4
 8002394:	4629      	mov	r1, r5
 8002396:	f7fe fb49 	bl	8000a2c <__aeabi_dcmplt>
 800239a:	2800      	cmp	r0, #0
 800239c:	d0e8      	beq.n	8002370 <pow+0xec>
 800239e:	2301      	movs	r3, #1
 80023a0:	9302      	str	r3, [sp, #8]
 80023a2:	4b6d      	ldr	r3, [pc, #436]	; (8002558 <pow+0x2d4>)
 80023a4:	9303      	str	r3, [sp, #12]
 80023a6:	4b6b      	ldr	r3, [pc, #428]	; (8002554 <pow+0x2d0>)
 80023a8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80023ac:	f993 3000 	ldrsb.w	r3, [r3]
 80023b0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80023b4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80023b8:	b913      	cbnz	r3, 80023c0 <pow+0x13c>
 80023ba:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80023be:	e7a1      	b.n	8002304 <pow+0x80>
 80023c0:	4967      	ldr	r1, [pc, #412]	; (8002560 <pow+0x2dc>)
 80023c2:	2000      	movs	r0, #0
 80023c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d19b      	bne.n	8002304 <pow+0x80>
 80023cc:	f000 ffc0 	bl	8003350 <__errno>
 80023d0:	2321      	movs	r3, #33	; 0x21
 80023d2:	6003      	str	r3, [r0, #0]
 80023d4:	e7c4      	b.n	8002360 <pow+0xdc>
 80023d6:	eeb0 0a48 	vmov.f32	s0, s16
 80023da:	eef0 0a68 	vmov.f32	s1, s17
 80023de:	f000 fe94 	bl	800310a <finite>
 80023e2:	9001      	str	r0, [sp, #4]
 80023e4:	2800      	cmp	r0, #0
 80023e6:	f040 808a 	bne.w	80024fe <pow+0x27a>
 80023ea:	ec47 6b10 	vmov	d0, r6, r7
 80023ee:	f000 fe8c 	bl	800310a <finite>
 80023f2:	2800      	cmp	r0, #0
 80023f4:	f000 8083 	beq.w	80024fe <pow+0x27a>
 80023f8:	ec45 4b10 	vmov	d0, r4, r5
 80023fc:	f000 fe85 	bl	800310a <finite>
 8002400:	2800      	cmp	r0, #0
 8002402:	d07c      	beq.n	80024fe <pow+0x27a>
 8002404:	ec53 2b18 	vmov	r2, r3, d8
 8002408:	ee18 0a10 	vmov	r0, s16
 800240c:	4619      	mov	r1, r3
 800240e:	f7fe fb35 	bl	8000a7c <__aeabi_dcmpun>
 8002412:	f998 9000 	ldrsb.w	r9, [r8]
 8002416:	4b50      	ldr	r3, [pc, #320]	; (8002558 <pow+0x2d4>)
 8002418:	b1b0      	cbz	r0, 8002448 <pow+0x1c4>
 800241a:	2201      	movs	r2, #1
 800241c:	9303      	str	r3, [sp, #12]
 800241e:	9b01      	ldr	r3, [sp, #4]
 8002420:	9202      	str	r2, [sp, #8]
 8002422:	930a      	str	r3, [sp, #40]	; 0x28
 8002424:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002428:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800242c:	f1b9 0f00 	cmp.w	r9, #0
 8002430:	d0c3      	beq.n	80023ba <pow+0x136>
 8002432:	4652      	mov	r2, sl
 8002434:	465b      	mov	r3, fp
 8002436:	4650      	mov	r0, sl
 8002438:	4659      	mov	r1, fp
 800243a:	f7fe f9af 	bl	800079c <__aeabi_ddiv>
 800243e:	f1b9 0f02 	cmp.w	r9, #2
 8002442:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002446:	e7c0      	b.n	80023ca <pow+0x146>
 8002448:	2203      	movs	r2, #3
 800244a:	9202      	str	r2, [sp, #8]
 800244c:	9303      	str	r3, [sp, #12]
 800244e:	900a      	str	r0, [sp, #40]	; 0x28
 8002450:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002454:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002458:	f1b9 0f00 	cmp.w	r9, #0
 800245c:	d12c      	bne.n	80024b8 <pow+0x234>
 800245e:	4b41      	ldr	r3, [pc, #260]	; (8002564 <pow+0x2e0>)
 8002460:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002464:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002468:	4630      	mov	r0, r6
 800246a:	4652      	mov	r2, sl
 800246c:	465b      	mov	r3, fp
 800246e:	4639      	mov	r1, r7
 8002470:	f7fe fadc 	bl	8000a2c <__aeabi_dcmplt>
 8002474:	2800      	cmp	r0, #0
 8002476:	d066      	beq.n	8002546 <pow+0x2c2>
 8002478:	2200      	movs	r2, #0
 800247a:	4b3b      	ldr	r3, [pc, #236]	; (8002568 <pow+0x2e4>)
 800247c:	4620      	mov	r0, r4
 800247e:	4629      	mov	r1, r5
 8002480:	f7fe f862 	bl	8000548 <__aeabi_dmul>
 8002484:	4604      	mov	r4, r0
 8002486:	460d      	mov	r5, r1
 8002488:	ec45 4b10 	vmov	d0, r4, r5
 800248c:	f000 fe50 	bl	8003130 <rint>
 8002490:	4620      	mov	r0, r4
 8002492:	ec53 2b10 	vmov	r2, r3, d0
 8002496:	4629      	mov	r1, r5
 8002498:	f7fe fabe 	bl	8000a18 <__aeabi_dcmpeq>
 800249c:	b920      	cbnz	r0, 80024a8 <pow+0x224>
 800249e:	4b33      	ldr	r3, [pc, #204]	; (800256c <pow+0x2e8>)
 80024a0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80024a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80024a8:	f998 3000 	ldrsb.w	r3, [r8]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d14a      	bne.n	8002546 <pow+0x2c2>
 80024b0:	f000 ff4e 	bl	8003350 <__errno>
 80024b4:	2322      	movs	r3, #34	; 0x22
 80024b6:	e78c      	b.n	80023d2 <pow+0x14e>
 80024b8:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <pow+0x2ec>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80024c0:	4630      	mov	r0, r6
 80024c2:	4652      	mov	r2, sl
 80024c4:	465b      	mov	r3, fp
 80024c6:	4639      	mov	r1, r7
 80024c8:	f7fe fab0 	bl	8000a2c <__aeabi_dcmplt>
 80024cc:	2800      	cmp	r0, #0
 80024ce:	d0eb      	beq.n	80024a8 <pow+0x224>
 80024d0:	2200      	movs	r2, #0
 80024d2:	4b25      	ldr	r3, [pc, #148]	; (8002568 <pow+0x2e4>)
 80024d4:	4620      	mov	r0, r4
 80024d6:	4629      	mov	r1, r5
 80024d8:	f7fe f836 	bl	8000548 <__aeabi_dmul>
 80024dc:	4604      	mov	r4, r0
 80024de:	460d      	mov	r5, r1
 80024e0:	ec45 4b10 	vmov	d0, r4, r5
 80024e4:	f000 fe24 	bl	8003130 <rint>
 80024e8:	4620      	mov	r0, r4
 80024ea:	ec53 2b10 	vmov	r2, r3, d0
 80024ee:	4629      	mov	r1, r5
 80024f0:	f7fe fa92 	bl	8000a18 <__aeabi_dcmpeq>
 80024f4:	2800      	cmp	r0, #0
 80024f6:	d1d7      	bne.n	80024a8 <pow+0x224>
 80024f8:	2200      	movs	r2, #0
 80024fa:	4b19      	ldr	r3, [pc, #100]	; (8002560 <pow+0x2dc>)
 80024fc:	e7d2      	b.n	80024a4 <pow+0x220>
 80024fe:	2200      	movs	r2, #0
 8002500:	2300      	movs	r3, #0
 8002502:	ec51 0b18 	vmov	r0, r1, d8
 8002506:	f7fe fa87 	bl	8000a18 <__aeabi_dcmpeq>
 800250a:	2800      	cmp	r0, #0
 800250c:	f43f af30 	beq.w	8002370 <pow+0xec>
 8002510:	ec47 6b10 	vmov	d0, r6, r7
 8002514:	f000 fdf9 	bl	800310a <finite>
 8002518:	2800      	cmp	r0, #0
 800251a:	f43f af29 	beq.w	8002370 <pow+0xec>
 800251e:	ec45 4b10 	vmov	d0, r4, r5
 8002522:	f000 fdf2 	bl	800310a <finite>
 8002526:	2800      	cmp	r0, #0
 8002528:	f43f af22 	beq.w	8002370 <pow+0xec>
 800252c:	2304      	movs	r3, #4
 800252e:	9302      	str	r3, [sp, #8]
 8002530:	4b09      	ldr	r3, [pc, #36]	; (8002558 <pow+0x2d4>)
 8002532:	9303      	str	r3, [sp, #12]
 8002534:	2300      	movs	r3, #0
 8002536:	930a      	str	r3, [sp, #40]	; 0x28
 8002538:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800253c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002540:	ed8d 9b08 	vstr	d9, [sp, #32]
 8002544:	e7b0      	b.n	80024a8 <pow+0x224>
 8002546:	a802      	add	r0, sp, #8
 8002548:	f000 fde7 	bl	800311a <matherr>
 800254c:	2800      	cmp	r0, #0
 800254e:	f47f af07 	bne.w	8002360 <pow+0xdc>
 8002552:	e7ad      	b.n	80024b0 <pow+0x22c>
 8002554:	2000000c 	.word	0x2000000c
 8002558:	08003390 	.word	0x08003390
 800255c:	3ff00000 	.word	0x3ff00000
 8002560:	fff00000 	.word	0xfff00000
 8002564:	47efffff 	.word	0x47efffff
 8002568:	3fe00000 	.word	0x3fe00000
 800256c:	c7efffff 	.word	0xc7efffff
 8002570:	7ff00000 	.word	0x7ff00000
 8002574:	00000000 	.word	0x00000000

08002578 <__ieee754_pow>:
 8002578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800257c:	b091      	sub	sp, #68	; 0x44
 800257e:	ed8d 1b00 	vstr	d1, [sp]
 8002582:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8002586:	ec57 6b10 	vmov	r6, r7, d0
 800258a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800258e:	ea58 0302 	orrs.w	r3, r8, r2
 8002592:	ee10 aa10 	vmov	sl, s0
 8002596:	463d      	mov	r5, r7
 8002598:	f000 84bd 	beq.w	8002f16 <__ieee754_pow+0x99e>
 800259c:	4b78      	ldr	r3, [pc, #480]	; (8002780 <__ieee754_pow+0x208>)
 800259e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80025a2:	429c      	cmp	r4, r3
 80025a4:	dc09      	bgt.n	80025ba <__ieee754_pow+0x42>
 80025a6:	d103      	bne.n	80025b0 <__ieee754_pow+0x38>
 80025a8:	b93e      	cbnz	r6, 80025ba <__ieee754_pow+0x42>
 80025aa:	45a0      	cmp	r8, r4
 80025ac:	dc0d      	bgt.n	80025ca <__ieee754_pow+0x52>
 80025ae:	e001      	b.n	80025b4 <__ieee754_pow+0x3c>
 80025b0:	4598      	cmp	r8, r3
 80025b2:	dc02      	bgt.n	80025ba <__ieee754_pow+0x42>
 80025b4:	4598      	cmp	r8, r3
 80025b6:	d10e      	bne.n	80025d6 <__ieee754_pow+0x5e>
 80025b8:	b16a      	cbz	r2, 80025d6 <__ieee754_pow+0x5e>
 80025ba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80025be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80025c2:	ea54 030a 	orrs.w	r3, r4, sl
 80025c6:	f000 84a6 	beq.w	8002f16 <__ieee754_pow+0x99e>
 80025ca:	486e      	ldr	r0, [pc, #440]	; (8002784 <__ieee754_pow+0x20c>)
 80025cc:	b011      	add	sp, #68	; 0x44
 80025ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025d2:	f000 bda5 	b.w	8003120 <nan>
 80025d6:	2d00      	cmp	r5, #0
 80025d8:	da53      	bge.n	8002682 <__ieee754_pow+0x10a>
 80025da:	4b6b      	ldr	r3, [pc, #428]	; (8002788 <__ieee754_pow+0x210>)
 80025dc:	4598      	cmp	r8, r3
 80025de:	dc4d      	bgt.n	800267c <__ieee754_pow+0x104>
 80025e0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80025e4:	4598      	cmp	r8, r3
 80025e6:	dd4c      	ble.n	8002682 <__ieee754_pow+0x10a>
 80025e8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80025ec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80025f0:	2b14      	cmp	r3, #20
 80025f2:	dd26      	ble.n	8002642 <__ieee754_pow+0xca>
 80025f4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80025f8:	fa22 f103 	lsr.w	r1, r2, r3
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	429a      	cmp	r2, r3
 8002602:	d13e      	bne.n	8002682 <__ieee754_pow+0x10a>
 8002604:	f001 0101 	and.w	r1, r1, #1
 8002608:	f1c1 0b02 	rsb	fp, r1, #2
 800260c:	2a00      	cmp	r2, #0
 800260e:	d15b      	bne.n	80026c8 <__ieee754_pow+0x150>
 8002610:	4b5b      	ldr	r3, [pc, #364]	; (8002780 <__ieee754_pow+0x208>)
 8002612:	4598      	cmp	r8, r3
 8002614:	d124      	bne.n	8002660 <__ieee754_pow+0xe8>
 8002616:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800261a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800261e:	ea53 030a 	orrs.w	r3, r3, sl
 8002622:	f000 8478 	beq.w	8002f16 <__ieee754_pow+0x99e>
 8002626:	4b59      	ldr	r3, [pc, #356]	; (800278c <__ieee754_pow+0x214>)
 8002628:	429c      	cmp	r4, r3
 800262a:	dd2d      	ble.n	8002688 <__ieee754_pow+0x110>
 800262c:	f1b9 0f00 	cmp.w	r9, #0
 8002630:	f280 8475 	bge.w	8002f1e <__ieee754_pow+0x9a6>
 8002634:	2000      	movs	r0, #0
 8002636:	2100      	movs	r1, #0
 8002638:	ec41 0b10 	vmov	d0, r0, r1
 800263c:	b011      	add	sp, #68	; 0x44
 800263e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002642:	2a00      	cmp	r2, #0
 8002644:	d13e      	bne.n	80026c4 <__ieee754_pow+0x14c>
 8002646:	f1c3 0314 	rsb	r3, r3, #20
 800264a:	fa48 f103 	asr.w	r1, r8, r3
 800264e:	fa01 f303 	lsl.w	r3, r1, r3
 8002652:	4598      	cmp	r8, r3
 8002654:	f040 846b 	bne.w	8002f2e <__ieee754_pow+0x9b6>
 8002658:	f001 0101 	and.w	r1, r1, #1
 800265c:	f1c1 0b02 	rsb	fp, r1, #2
 8002660:	4b4b      	ldr	r3, [pc, #300]	; (8002790 <__ieee754_pow+0x218>)
 8002662:	4598      	cmp	r8, r3
 8002664:	d118      	bne.n	8002698 <__ieee754_pow+0x120>
 8002666:	f1b9 0f00 	cmp.w	r9, #0
 800266a:	f280 845c 	bge.w	8002f26 <__ieee754_pow+0x9ae>
 800266e:	4948      	ldr	r1, [pc, #288]	; (8002790 <__ieee754_pow+0x218>)
 8002670:	4632      	mov	r2, r6
 8002672:	463b      	mov	r3, r7
 8002674:	2000      	movs	r0, #0
 8002676:	f7fe f891 	bl	800079c <__aeabi_ddiv>
 800267a:	e7dd      	b.n	8002638 <__ieee754_pow+0xc0>
 800267c:	f04f 0b02 	mov.w	fp, #2
 8002680:	e7c4      	b.n	800260c <__ieee754_pow+0x94>
 8002682:	f04f 0b00 	mov.w	fp, #0
 8002686:	e7c1      	b.n	800260c <__ieee754_pow+0x94>
 8002688:	f1b9 0f00 	cmp.w	r9, #0
 800268c:	dad2      	bge.n	8002634 <__ieee754_pow+0xbc>
 800268e:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8002692:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002696:	e7cf      	b.n	8002638 <__ieee754_pow+0xc0>
 8002698:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800269c:	d106      	bne.n	80026ac <__ieee754_pow+0x134>
 800269e:	4632      	mov	r2, r6
 80026a0:	463b      	mov	r3, r7
 80026a2:	4610      	mov	r0, r2
 80026a4:	4619      	mov	r1, r3
 80026a6:	f7fd ff4f 	bl	8000548 <__aeabi_dmul>
 80026aa:	e7c5      	b.n	8002638 <__ieee754_pow+0xc0>
 80026ac:	4b39      	ldr	r3, [pc, #228]	; (8002794 <__ieee754_pow+0x21c>)
 80026ae:	4599      	cmp	r9, r3
 80026b0:	d10a      	bne.n	80026c8 <__ieee754_pow+0x150>
 80026b2:	2d00      	cmp	r5, #0
 80026b4:	db08      	blt.n	80026c8 <__ieee754_pow+0x150>
 80026b6:	ec47 6b10 	vmov	d0, r6, r7
 80026ba:	b011      	add	sp, #68	; 0x44
 80026bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026c0:	f000 bc6c 	b.w	8002f9c <__ieee754_sqrt>
 80026c4:	f04f 0b00 	mov.w	fp, #0
 80026c8:	ec47 6b10 	vmov	d0, r6, r7
 80026cc:	f000 fd16 	bl	80030fc <fabs>
 80026d0:	ec51 0b10 	vmov	r0, r1, d0
 80026d4:	f1ba 0f00 	cmp.w	sl, #0
 80026d8:	d127      	bne.n	800272a <__ieee754_pow+0x1b2>
 80026da:	b124      	cbz	r4, 80026e6 <__ieee754_pow+0x16e>
 80026dc:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <__ieee754_pow+0x218>)
 80026de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d121      	bne.n	800272a <__ieee754_pow+0x1b2>
 80026e6:	f1b9 0f00 	cmp.w	r9, #0
 80026ea:	da05      	bge.n	80026f8 <__ieee754_pow+0x180>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	2000      	movs	r0, #0
 80026f2:	4927      	ldr	r1, [pc, #156]	; (8002790 <__ieee754_pow+0x218>)
 80026f4:	f7fe f852 	bl	800079c <__aeabi_ddiv>
 80026f8:	2d00      	cmp	r5, #0
 80026fa:	da9d      	bge.n	8002638 <__ieee754_pow+0xc0>
 80026fc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002700:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002704:	ea54 030b 	orrs.w	r3, r4, fp
 8002708:	d108      	bne.n	800271c <__ieee754_pow+0x1a4>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4610      	mov	r0, r2
 8002710:	4619      	mov	r1, r3
 8002712:	f7fd fd65 	bl	80001e0 <__aeabi_dsub>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	e7ac      	b.n	8002676 <__ieee754_pow+0xfe>
 800271c:	f1bb 0f01 	cmp.w	fp, #1
 8002720:	d18a      	bne.n	8002638 <__ieee754_pow+0xc0>
 8002722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002726:	4619      	mov	r1, r3
 8002728:	e786      	b.n	8002638 <__ieee754_pow+0xc0>
 800272a:	0fed      	lsrs	r5, r5, #31
 800272c:	1e6b      	subs	r3, r5, #1
 800272e:	930d      	str	r3, [sp, #52]	; 0x34
 8002730:	ea5b 0303 	orrs.w	r3, fp, r3
 8002734:	d102      	bne.n	800273c <__ieee754_pow+0x1c4>
 8002736:	4632      	mov	r2, r6
 8002738:	463b      	mov	r3, r7
 800273a:	e7e8      	b.n	800270e <__ieee754_pow+0x196>
 800273c:	4b16      	ldr	r3, [pc, #88]	; (8002798 <__ieee754_pow+0x220>)
 800273e:	4598      	cmp	r8, r3
 8002740:	f340 80fe 	ble.w	8002940 <__ieee754_pow+0x3c8>
 8002744:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8002748:	4598      	cmp	r8, r3
 800274a:	dd0a      	ble.n	8002762 <__ieee754_pow+0x1ea>
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <__ieee754_pow+0x214>)
 800274e:	429c      	cmp	r4, r3
 8002750:	dc0d      	bgt.n	800276e <__ieee754_pow+0x1f6>
 8002752:	f1b9 0f00 	cmp.w	r9, #0
 8002756:	f6bf af6d 	bge.w	8002634 <__ieee754_pow+0xbc>
 800275a:	a307      	add	r3, pc, #28	; (adr r3, 8002778 <__ieee754_pow+0x200>)
 800275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002760:	e79f      	b.n	80026a2 <__ieee754_pow+0x12a>
 8002762:	4b0e      	ldr	r3, [pc, #56]	; (800279c <__ieee754_pow+0x224>)
 8002764:	429c      	cmp	r4, r3
 8002766:	ddf4      	ble.n	8002752 <__ieee754_pow+0x1da>
 8002768:	4b09      	ldr	r3, [pc, #36]	; (8002790 <__ieee754_pow+0x218>)
 800276a:	429c      	cmp	r4, r3
 800276c:	dd18      	ble.n	80027a0 <__ieee754_pow+0x228>
 800276e:	f1b9 0f00 	cmp.w	r9, #0
 8002772:	dcf2      	bgt.n	800275a <__ieee754_pow+0x1e2>
 8002774:	e75e      	b.n	8002634 <__ieee754_pow+0xbc>
 8002776:	bf00      	nop
 8002778:	8800759c 	.word	0x8800759c
 800277c:	7e37e43c 	.word	0x7e37e43c
 8002780:	7ff00000 	.word	0x7ff00000
 8002784:	08003393 	.word	0x08003393
 8002788:	433fffff 	.word	0x433fffff
 800278c:	3fefffff 	.word	0x3fefffff
 8002790:	3ff00000 	.word	0x3ff00000
 8002794:	3fe00000 	.word	0x3fe00000
 8002798:	41e00000 	.word	0x41e00000
 800279c:	3feffffe 	.word	0x3feffffe
 80027a0:	2200      	movs	r2, #0
 80027a2:	4b63      	ldr	r3, [pc, #396]	; (8002930 <__ieee754_pow+0x3b8>)
 80027a4:	f7fd fd1c 	bl	80001e0 <__aeabi_dsub>
 80027a8:	a355      	add	r3, pc, #340	; (adr r3, 8002900 <__ieee754_pow+0x388>)
 80027aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ae:	4604      	mov	r4, r0
 80027b0:	460d      	mov	r5, r1
 80027b2:	f7fd fec9 	bl	8000548 <__aeabi_dmul>
 80027b6:	a354      	add	r3, pc, #336	; (adr r3, 8002908 <__ieee754_pow+0x390>)
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	4606      	mov	r6, r0
 80027be:	460f      	mov	r7, r1
 80027c0:	4620      	mov	r0, r4
 80027c2:	4629      	mov	r1, r5
 80027c4:	f7fd fec0 	bl	8000548 <__aeabi_dmul>
 80027c8:	2200      	movs	r2, #0
 80027ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80027ce:	4b59      	ldr	r3, [pc, #356]	; (8002934 <__ieee754_pow+0x3bc>)
 80027d0:	4620      	mov	r0, r4
 80027d2:	4629      	mov	r1, r5
 80027d4:	f7fd feb8 	bl	8000548 <__aeabi_dmul>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	a14c      	add	r1, pc, #304	; (adr r1, 8002910 <__ieee754_pow+0x398>)
 80027de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027e2:	f7fd fcfd 	bl	80001e0 <__aeabi_dsub>
 80027e6:	4622      	mov	r2, r4
 80027e8:	462b      	mov	r3, r5
 80027ea:	f7fd fead 	bl	8000548 <__aeabi_dmul>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	2000      	movs	r0, #0
 80027f4:	4950      	ldr	r1, [pc, #320]	; (8002938 <__ieee754_pow+0x3c0>)
 80027f6:	f7fd fcf3 	bl	80001e0 <__aeabi_dsub>
 80027fa:	4622      	mov	r2, r4
 80027fc:	462b      	mov	r3, r5
 80027fe:	4680      	mov	r8, r0
 8002800:	4689      	mov	r9, r1
 8002802:	4620      	mov	r0, r4
 8002804:	4629      	mov	r1, r5
 8002806:	f7fd fe9f 	bl	8000548 <__aeabi_dmul>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4640      	mov	r0, r8
 8002810:	4649      	mov	r1, r9
 8002812:	f7fd fe99 	bl	8000548 <__aeabi_dmul>
 8002816:	a340      	add	r3, pc, #256	; (adr r3, 8002918 <__ieee754_pow+0x3a0>)
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	f7fd fe94 	bl	8000548 <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002828:	f7fd fcda 	bl	80001e0 <__aeabi_dsub>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4604      	mov	r4, r0
 8002832:	460d      	mov	r5, r1
 8002834:	4630      	mov	r0, r6
 8002836:	4639      	mov	r1, r7
 8002838:	f7fd fcd4 	bl	80001e4 <__adddf3>
 800283c:	2000      	movs	r0, #0
 800283e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002842:	4632      	mov	r2, r6
 8002844:	463b      	mov	r3, r7
 8002846:	f7fd fccb 	bl	80001e0 <__aeabi_dsub>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4620      	mov	r0, r4
 8002850:	4629      	mov	r1, r5
 8002852:	f7fd fcc5 	bl	80001e0 <__aeabi_dsub>
 8002856:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002858:	f10b 33ff 	add.w	r3, fp, #4294967295
 800285c:	4313      	orrs	r3, r2
 800285e:	4606      	mov	r6, r0
 8002860:	460f      	mov	r7, r1
 8002862:	f040 81eb 	bne.w	8002c3c <__ieee754_pow+0x6c4>
 8002866:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8002920 <__ieee754_pow+0x3a8>
 800286a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800286e:	2400      	movs	r4, #0
 8002870:	4622      	mov	r2, r4
 8002872:	462b      	mov	r3, r5
 8002874:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002878:	ed8d 7b02 	vstr	d7, [sp, #8]
 800287c:	f7fd fcb0 	bl	80001e0 <__aeabi_dsub>
 8002880:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002884:	f7fd fe60 	bl	8000548 <__aeabi_dmul>
 8002888:	e9dd 2300 	ldrd	r2, r3, [sp]
 800288c:	4680      	mov	r8, r0
 800288e:	4689      	mov	r9, r1
 8002890:	4630      	mov	r0, r6
 8002892:	4639      	mov	r1, r7
 8002894:	f7fd fe58 	bl	8000548 <__aeabi_dmul>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4640      	mov	r0, r8
 800289e:	4649      	mov	r1, r9
 80028a0:	f7fd fca0 	bl	80001e4 <__adddf3>
 80028a4:	4622      	mov	r2, r4
 80028a6:	462b      	mov	r3, r5
 80028a8:	4680      	mov	r8, r0
 80028aa:	4689      	mov	r9, r1
 80028ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80028b0:	f7fd fe4a 	bl	8000548 <__aeabi_dmul>
 80028b4:	460b      	mov	r3, r1
 80028b6:	4604      	mov	r4, r0
 80028b8:	460d      	mov	r5, r1
 80028ba:	4602      	mov	r2, r0
 80028bc:	4649      	mov	r1, r9
 80028be:	4640      	mov	r0, r8
 80028c0:	e9cd 4500 	strd	r4, r5, [sp]
 80028c4:	f7fd fc8e 	bl	80001e4 <__adddf3>
 80028c8:	4b1c      	ldr	r3, [pc, #112]	; (800293c <__ieee754_pow+0x3c4>)
 80028ca:	4299      	cmp	r1, r3
 80028cc:	4606      	mov	r6, r0
 80028ce:	460f      	mov	r7, r1
 80028d0:	468b      	mov	fp, r1
 80028d2:	f340 82f7 	ble.w	8002ec4 <__ieee754_pow+0x94c>
 80028d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80028da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80028de:	4303      	orrs	r3, r0
 80028e0:	f000 81ea 	beq.w	8002cb8 <__ieee754_pow+0x740>
 80028e4:	a310      	add	r3, pc, #64	; (adr r3, 8002928 <__ieee754_pow+0x3b0>)
 80028e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80028ee:	f7fd fe2b 	bl	8000548 <__aeabi_dmul>
 80028f2:	a30d      	add	r3, pc, #52	; (adr r3, 8002928 <__ieee754_pow+0x3b0>)
 80028f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f8:	e6d5      	b.n	80026a6 <__ieee754_pow+0x12e>
 80028fa:	bf00      	nop
 80028fc:	f3af 8000 	nop.w
 8002900:	60000000 	.word	0x60000000
 8002904:	3ff71547 	.word	0x3ff71547
 8002908:	f85ddf44 	.word	0xf85ddf44
 800290c:	3e54ae0b 	.word	0x3e54ae0b
 8002910:	55555555 	.word	0x55555555
 8002914:	3fd55555 	.word	0x3fd55555
 8002918:	652b82fe 	.word	0x652b82fe
 800291c:	3ff71547 	.word	0x3ff71547
 8002920:	00000000 	.word	0x00000000
 8002924:	bff00000 	.word	0xbff00000
 8002928:	8800759c 	.word	0x8800759c
 800292c:	7e37e43c 	.word	0x7e37e43c
 8002930:	3ff00000 	.word	0x3ff00000
 8002934:	3fd00000 	.word	0x3fd00000
 8002938:	3fe00000 	.word	0x3fe00000
 800293c:	408fffff 	.word	0x408fffff
 8002940:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	da05      	bge.n	8002956 <__ieee754_pow+0x3de>
 800294a:	4bd3      	ldr	r3, [pc, #844]	; (8002c98 <__ieee754_pow+0x720>)
 800294c:	f7fd fdfc 	bl	8000548 <__aeabi_dmul>
 8002950:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8002954:	460c      	mov	r4, r1
 8002956:	1523      	asrs	r3, r4, #20
 8002958:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800295c:	4413      	add	r3, r2
 800295e:	9307      	str	r3, [sp, #28]
 8002960:	4bce      	ldr	r3, [pc, #824]	; (8002c9c <__ieee754_pow+0x724>)
 8002962:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002966:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800296a:	429c      	cmp	r4, r3
 800296c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002970:	dd08      	ble.n	8002984 <__ieee754_pow+0x40c>
 8002972:	4bcb      	ldr	r3, [pc, #812]	; (8002ca0 <__ieee754_pow+0x728>)
 8002974:	429c      	cmp	r4, r3
 8002976:	f340 815e 	ble.w	8002c36 <__ieee754_pow+0x6be>
 800297a:	9b07      	ldr	r3, [sp, #28]
 800297c:	3301      	adds	r3, #1
 800297e:	9307      	str	r3, [sp, #28]
 8002980:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002984:	f04f 0a00 	mov.w	sl, #0
 8002988:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800298c:	930c      	str	r3, [sp, #48]	; 0x30
 800298e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002990:	4bc4      	ldr	r3, [pc, #784]	; (8002ca4 <__ieee754_pow+0x72c>)
 8002992:	4413      	add	r3, r2
 8002994:	ed93 7b00 	vldr	d7, [r3]
 8002998:	4629      	mov	r1, r5
 800299a:	ec53 2b17 	vmov	r2, r3, d7
 800299e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80029a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80029a6:	f7fd fc1b 	bl	80001e0 <__aeabi_dsub>
 80029aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80029ae:	4606      	mov	r6, r0
 80029b0:	460f      	mov	r7, r1
 80029b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80029b6:	f7fd fc15 	bl	80001e4 <__adddf3>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	2000      	movs	r0, #0
 80029c0:	49b9      	ldr	r1, [pc, #740]	; (8002ca8 <__ieee754_pow+0x730>)
 80029c2:	f7fd feeb 	bl	800079c <__aeabi_ddiv>
 80029c6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4630      	mov	r0, r6
 80029d0:	4639      	mov	r1, r7
 80029d2:	f7fd fdb9 	bl	8000548 <__aeabi_dmul>
 80029d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80029da:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80029de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80029e2:	2300      	movs	r3, #0
 80029e4:	9302      	str	r3, [sp, #8]
 80029e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80029ea:	106d      	asrs	r5, r5, #1
 80029ec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80029f0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80029f4:	2200      	movs	r2, #0
 80029f6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80029fa:	4640      	mov	r0, r8
 80029fc:	4649      	mov	r1, r9
 80029fe:	4614      	mov	r4, r2
 8002a00:	461d      	mov	r5, r3
 8002a02:	f7fd fda1 	bl	8000548 <__aeabi_dmul>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4630      	mov	r0, r6
 8002a0c:	4639      	mov	r1, r7
 8002a0e:	f7fd fbe7 	bl	80001e0 <__aeabi_dsub>
 8002a12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002a16:	4606      	mov	r6, r0
 8002a18:	460f      	mov	r7, r1
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	4629      	mov	r1, r5
 8002a1e:	f7fd fbdf 	bl	80001e0 <__aeabi_dsub>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002a2a:	f7fd fbd9 	bl	80001e0 <__aeabi_dsub>
 8002a2e:	4642      	mov	r2, r8
 8002a30:	464b      	mov	r3, r9
 8002a32:	f7fd fd89 	bl	8000548 <__aeabi_dmul>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4630      	mov	r0, r6
 8002a3c:	4639      	mov	r1, r7
 8002a3e:	f7fd fbcf 	bl	80001e0 <__aeabi_dsub>
 8002a42:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002a46:	f7fd fd7f 	bl	8000548 <__aeabi_dmul>
 8002a4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002a4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002a52:	4610      	mov	r0, r2
 8002a54:	4619      	mov	r1, r3
 8002a56:	f7fd fd77 	bl	8000548 <__aeabi_dmul>
 8002a5a:	a37b      	add	r3, pc, #492	; (adr r3, 8002c48 <__ieee754_pow+0x6d0>)
 8002a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a60:	4604      	mov	r4, r0
 8002a62:	460d      	mov	r5, r1
 8002a64:	f7fd fd70 	bl	8000548 <__aeabi_dmul>
 8002a68:	a379      	add	r3, pc, #484	; (adr r3, 8002c50 <__ieee754_pow+0x6d8>)
 8002a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6e:	f7fd fbb9 	bl	80001e4 <__adddf3>
 8002a72:	4622      	mov	r2, r4
 8002a74:	462b      	mov	r3, r5
 8002a76:	f7fd fd67 	bl	8000548 <__aeabi_dmul>
 8002a7a:	a377      	add	r3, pc, #476	; (adr r3, 8002c58 <__ieee754_pow+0x6e0>)
 8002a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a80:	f7fd fbb0 	bl	80001e4 <__adddf3>
 8002a84:	4622      	mov	r2, r4
 8002a86:	462b      	mov	r3, r5
 8002a88:	f7fd fd5e 	bl	8000548 <__aeabi_dmul>
 8002a8c:	a374      	add	r3, pc, #464	; (adr r3, 8002c60 <__ieee754_pow+0x6e8>)
 8002a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a92:	f7fd fba7 	bl	80001e4 <__adddf3>
 8002a96:	4622      	mov	r2, r4
 8002a98:	462b      	mov	r3, r5
 8002a9a:	f7fd fd55 	bl	8000548 <__aeabi_dmul>
 8002a9e:	a372      	add	r3, pc, #456	; (adr r3, 8002c68 <__ieee754_pow+0x6f0>)
 8002aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa4:	f7fd fb9e 	bl	80001e4 <__adddf3>
 8002aa8:	4622      	mov	r2, r4
 8002aaa:	462b      	mov	r3, r5
 8002aac:	f7fd fd4c 	bl	8000548 <__aeabi_dmul>
 8002ab0:	a36f      	add	r3, pc, #444	; (adr r3, 8002c70 <__ieee754_pow+0x6f8>)
 8002ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab6:	f7fd fb95 	bl	80001e4 <__adddf3>
 8002aba:	4622      	mov	r2, r4
 8002abc:	4606      	mov	r6, r0
 8002abe:	460f      	mov	r7, r1
 8002ac0:	462b      	mov	r3, r5
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	4629      	mov	r1, r5
 8002ac6:	f7fd fd3f 	bl	8000548 <__aeabi_dmul>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4630      	mov	r0, r6
 8002ad0:	4639      	mov	r1, r7
 8002ad2:	f7fd fd39 	bl	8000548 <__aeabi_dmul>
 8002ad6:	4642      	mov	r2, r8
 8002ad8:	4604      	mov	r4, r0
 8002ada:	460d      	mov	r5, r1
 8002adc:	464b      	mov	r3, r9
 8002ade:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002ae2:	f7fd fb7f 	bl	80001e4 <__adddf3>
 8002ae6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002aea:	f7fd fd2d 	bl	8000548 <__aeabi_dmul>
 8002aee:	4622      	mov	r2, r4
 8002af0:	462b      	mov	r3, r5
 8002af2:	f7fd fb77 	bl	80001e4 <__adddf3>
 8002af6:	4642      	mov	r2, r8
 8002af8:	4606      	mov	r6, r0
 8002afa:	460f      	mov	r7, r1
 8002afc:	464b      	mov	r3, r9
 8002afe:	4640      	mov	r0, r8
 8002b00:	4649      	mov	r1, r9
 8002b02:	f7fd fd21 	bl	8000548 <__aeabi_dmul>
 8002b06:	2200      	movs	r2, #0
 8002b08:	4b68      	ldr	r3, [pc, #416]	; (8002cac <__ieee754_pow+0x734>)
 8002b0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002b0e:	f7fd fb69 	bl	80001e4 <__adddf3>
 8002b12:	4632      	mov	r2, r6
 8002b14:	463b      	mov	r3, r7
 8002b16:	f7fd fb65 	bl	80001e4 <__adddf3>
 8002b1a:	9802      	ldr	r0, [sp, #8]
 8002b1c:	460d      	mov	r5, r1
 8002b1e:	4604      	mov	r4, r0
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4640      	mov	r0, r8
 8002b26:	4649      	mov	r1, r9
 8002b28:	f7fd fd0e 	bl	8000548 <__aeabi_dmul>
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	4680      	mov	r8, r0
 8002b30:	4689      	mov	r9, r1
 8002b32:	4b5e      	ldr	r3, [pc, #376]	; (8002cac <__ieee754_pow+0x734>)
 8002b34:	4620      	mov	r0, r4
 8002b36:	4629      	mov	r1, r5
 8002b38:	f7fd fb52 	bl	80001e0 <__aeabi_dsub>
 8002b3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002b40:	f7fd fb4e 	bl	80001e0 <__aeabi_dsub>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4630      	mov	r0, r6
 8002b4a:	4639      	mov	r1, r7
 8002b4c:	f7fd fb48 	bl	80001e0 <__aeabi_dsub>
 8002b50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b54:	f7fd fcf8 	bl	8000548 <__aeabi_dmul>
 8002b58:	4622      	mov	r2, r4
 8002b5a:	4606      	mov	r6, r0
 8002b5c:	460f      	mov	r7, r1
 8002b5e:	462b      	mov	r3, r5
 8002b60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002b64:	f7fd fcf0 	bl	8000548 <__aeabi_dmul>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4630      	mov	r0, r6
 8002b6e:	4639      	mov	r1, r7
 8002b70:	f7fd fb38 	bl	80001e4 <__adddf3>
 8002b74:	4606      	mov	r6, r0
 8002b76:	460f      	mov	r7, r1
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4640      	mov	r0, r8
 8002b7e:	4649      	mov	r1, r9
 8002b80:	f7fd fb30 	bl	80001e4 <__adddf3>
 8002b84:	9802      	ldr	r0, [sp, #8]
 8002b86:	a33c      	add	r3, pc, #240	; (adr r3, 8002c78 <__ieee754_pow+0x700>)
 8002b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8c:	4604      	mov	r4, r0
 8002b8e:	460d      	mov	r5, r1
 8002b90:	f7fd fcda 	bl	8000548 <__aeabi_dmul>
 8002b94:	4642      	mov	r2, r8
 8002b96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002b9a:	464b      	mov	r3, r9
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	4629      	mov	r1, r5
 8002ba0:	f7fd fb1e 	bl	80001e0 <__aeabi_dsub>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4630      	mov	r0, r6
 8002baa:	4639      	mov	r1, r7
 8002bac:	f7fd fb18 	bl	80001e0 <__aeabi_dsub>
 8002bb0:	a333      	add	r3, pc, #204	; (adr r3, 8002c80 <__ieee754_pow+0x708>)
 8002bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb6:	f7fd fcc7 	bl	8000548 <__aeabi_dmul>
 8002bba:	a333      	add	r3, pc, #204	; (adr r3, 8002c88 <__ieee754_pow+0x710>)
 8002bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc0:	4606      	mov	r6, r0
 8002bc2:	460f      	mov	r7, r1
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	f7fd fcbe 	bl	8000548 <__aeabi_dmul>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4630      	mov	r0, r6
 8002bd2:	4639      	mov	r1, r7
 8002bd4:	f7fd fb06 	bl	80001e4 <__adddf3>
 8002bd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002bda:	4b35      	ldr	r3, [pc, #212]	; (8002cb0 <__ieee754_pow+0x738>)
 8002bdc:	4413      	add	r3, r2
 8002bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be2:	f7fd faff 	bl	80001e4 <__adddf3>
 8002be6:	4604      	mov	r4, r0
 8002be8:	9807      	ldr	r0, [sp, #28]
 8002bea:	460d      	mov	r5, r1
 8002bec:	f7fd fc46 	bl	800047c <__aeabi_i2d>
 8002bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002bf2:	4b30      	ldr	r3, [pc, #192]	; (8002cb4 <__ieee754_pow+0x73c>)
 8002bf4:	4413      	add	r3, r2
 8002bf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002bfa:	4606      	mov	r6, r0
 8002bfc:	460f      	mov	r7, r1
 8002bfe:	4622      	mov	r2, r4
 8002c00:	462b      	mov	r3, r5
 8002c02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002c06:	f7fd faed 	bl	80001e4 <__adddf3>
 8002c0a:	4642      	mov	r2, r8
 8002c0c:	464b      	mov	r3, r9
 8002c0e:	f7fd fae9 	bl	80001e4 <__adddf3>
 8002c12:	4632      	mov	r2, r6
 8002c14:	463b      	mov	r3, r7
 8002c16:	f7fd fae5 	bl	80001e4 <__adddf3>
 8002c1a:	9802      	ldr	r0, [sp, #8]
 8002c1c:	4632      	mov	r2, r6
 8002c1e:	463b      	mov	r3, r7
 8002c20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002c24:	f7fd fadc 	bl	80001e0 <__aeabi_dsub>
 8002c28:	4642      	mov	r2, r8
 8002c2a:	464b      	mov	r3, r9
 8002c2c:	f7fd fad8 	bl	80001e0 <__aeabi_dsub>
 8002c30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002c34:	e607      	b.n	8002846 <__ieee754_pow+0x2ce>
 8002c36:	f04f 0a01 	mov.w	sl, #1
 8002c3a:	e6a5      	b.n	8002988 <__ieee754_pow+0x410>
 8002c3c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8002c90 <__ieee754_pow+0x718>
 8002c40:	e613      	b.n	800286a <__ieee754_pow+0x2f2>
 8002c42:	bf00      	nop
 8002c44:	f3af 8000 	nop.w
 8002c48:	4a454eef 	.word	0x4a454eef
 8002c4c:	3fca7e28 	.word	0x3fca7e28
 8002c50:	93c9db65 	.word	0x93c9db65
 8002c54:	3fcd864a 	.word	0x3fcd864a
 8002c58:	a91d4101 	.word	0xa91d4101
 8002c5c:	3fd17460 	.word	0x3fd17460
 8002c60:	518f264d 	.word	0x518f264d
 8002c64:	3fd55555 	.word	0x3fd55555
 8002c68:	db6fabff 	.word	0xdb6fabff
 8002c6c:	3fdb6db6 	.word	0x3fdb6db6
 8002c70:	33333303 	.word	0x33333303
 8002c74:	3fe33333 	.word	0x3fe33333
 8002c78:	e0000000 	.word	0xe0000000
 8002c7c:	3feec709 	.word	0x3feec709
 8002c80:	dc3a03fd 	.word	0xdc3a03fd
 8002c84:	3feec709 	.word	0x3feec709
 8002c88:	145b01f5 	.word	0x145b01f5
 8002c8c:	be3e2fe0 	.word	0xbe3e2fe0
 8002c90:	00000000 	.word	0x00000000
 8002c94:	3ff00000 	.word	0x3ff00000
 8002c98:	43400000 	.word	0x43400000
 8002c9c:	0003988e 	.word	0x0003988e
 8002ca0:	000bb679 	.word	0x000bb679
 8002ca4:	08003398 	.word	0x08003398
 8002ca8:	3ff00000 	.word	0x3ff00000
 8002cac:	40080000 	.word	0x40080000
 8002cb0:	080033b8 	.word	0x080033b8
 8002cb4:	080033a8 	.word	0x080033a8
 8002cb8:	a3b6      	add	r3, pc, #728	; (adr r3, 8002f94 <__ieee754_pow+0xa1c>)
 8002cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbe:	4640      	mov	r0, r8
 8002cc0:	4649      	mov	r1, r9
 8002cc2:	f7fd fa8f 	bl	80001e4 <__adddf3>
 8002cc6:	4622      	mov	r2, r4
 8002cc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002ccc:	462b      	mov	r3, r5
 8002cce:	4630      	mov	r0, r6
 8002cd0:	4639      	mov	r1, r7
 8002cd2:	f7fd fa85 	bl	80001e0 <__aeabi_dsub>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002cde:	f7fd fec3 	bl	8000a68 <__aeabi_dcmpgt>
 8002ce2:	2800      	cmp	r0, #0
 8002ce4:	f47f adfe 	bne.w	80028e4 <__ieee754_pow+0x36c>
 8002ce8:	4aa5      	ldr	r2, [pc, #660]	; (8002f80 <__ieee754_pow+0xa08>)
 8002cea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	f340 810c 	ble.w	8002f0c <__ieee754_pow+0x994>
 8002cf4:	151b      	asrs	r3, r3, #20
 8002cf6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8002cfa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8002cfe:	fa4a f303 	asr.w	r3, sl, r3
 8002d02:	445b      	add	r3, fp
 8002d04:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8002d08:	4e9e      	ldr	r6, [pc, #632]	; (8002f84 <__ieee754_pow+0xa0c>)
 8002d0a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8002d0e:	4116      	asrs	r6, r2
 8002d10:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8002d14:	2000      	movs	r0, #0
 8002d16:	ea23 0106 	bic.w	r1, r3, r6
 8002d1a:	f1c2 0214 	rsb	r2, r2, #20
 8002d1e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8002d22:	fa4a fa02 	asr.w	sl, sl, r2
 8002d26:	f1bb 0f00 	cmp.w	fp, #0
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4620      	mov	r0, r4
 8002d30:	4629      	mov	r1, r5
 8002d32:	bfb8      	it	lt
 8002d34:	f1ca 0a00 	rsblt	sl, sl, #0
 8002d38:	f7fd fa52 	bl	80001e0 <__aeabi_dsub>
 8002d3c:	e9cd 0100 	strd	r0, r1, [sp]
 8002d40:	4642      	mov	r2, r8
 8002d42:	464b      	mov	r3, r9
 8002d44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002d48:	f7fd fa4c 	bl	80001e4 <__adddf3>
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	a37a      	add	r3, pc, #488	; (adr r3, 8002f38 <__ieee754_pow+0x9c0>)
 8002d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d54:	4604      	mov	r4, r0
 8002d56:	460d      	mov	r5, r1
 8002d58:	f7fd fbf6 	bl	8000548 <__aeabi_dmul>
 8002d5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002d60:	4606      	mov	r6, r0
 8002d62:	460f      	mov	r7, r1
 8002d64:	4620      	mov	r0, r4
 8002d66:	4629      	mov	r1, r5
 8002d68:	f7fd fa3a 	bl	80001e0 <__aeabi_dsub>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4640      	mov	r0, r8
 8002d72:	4649      	mov	r1, r9
 8002d74:	f7fd fa34 	bl	80001e0 <__aeabi_dsub>
 8002d78:	a371      	add	r3, pc, #452	; (adr r3, 8002f40 <__ieee754_pow+0x9c8>)
 8002d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7e:	f7fd fbe3 	bl	8000548 <__aeabi_dmul>
 8002d82:	a371      	add	r3, pc, #452	; (adr r3, 8002f48 <__ieee754_pow+0x9d0>)
 8002d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d88:	4680      	mov	r8, r0
 8002d8a:	4689      	mov	r9, r1
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	4629      	mov	r1, r5
 8002d90:	f7fd fbda 	bl	8000548 <__aeabi_dmul>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4640      	mov	r0, r8
 8002d9a:	4649      	mov	r1, r9
 8002d9c:	f7fd fa22 	bl	80001e4 <__adddf3>
 8002da0:	4604      	mov	r4, r0
 8002da2:	460d      	mov	r5, r1
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4630      	mov	r0, r6
 8002daa:	4639      	mov	r1, r7
 8002dac:	f7fd fa1a 	bl	80001e4 <__adddf3>
 8002db0:	4632      	mov	r2, r6
 8002db2:	463b      	mov	r3, r7
 8002db4:	4680      	mov	r8, r0
 8002db6:	4689      	mov	r9, r1
 8002db8:	f7fd fa12 	bl	80001e0 <__aeabi_dsub>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	4629      	mov	r1, r5
 8002dc4:	f7fd fa0c 	bl	80001e0 <__aeabi_dsub>
 8002dc8:	4642      	mov	r2, r8
 8002dca:	4606      	mov	r6, r0
 8002dcc:	460f      	mov	r7, r1
 8002dce:	464b      	mov	r3, r9
 8002dd0:	4640      	mov	r0, r8
 8002dd2:	4649      	mov	r1, r9
 8002dd4:	f7fd fbb8 	bl	8000548 <__aeabi_dmul>
 8002dd8:	a35d      	add	r3, pc, #372	; (adr r3, 8002f50 <__ieee754_pow+0x9d8>)
 8002dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dde:	4604      	mov	r4, r0
 8002de0:	460d      	mov	r5, r1
 8002de2:	f7fd fbb1 	bl	8000548 <__aeabi_dmul>
 8002de6:	a35c      	add	r3, pc, #368	; (adr r3, 8002f58 <__ieee754_pow+0x9e0>)
 8002de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dec:	f7fd f9f8 	bl	80001e0 <__aeabi_dsub>
 8002df0:	4622      	mov	r2, r4
 8002df2:	462b      	mov	r3, r5
 8002df4:	f7fd fba8 	bl	8000548 <__aeabi_dmul>
 8002df8:	a359      	add	r3, pc, #356	; (adr r3, 8002f60 <__ieee754_pow+0x9e8>)
 8002dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfe:	f7fd f9f1 	bl	80001e4 <__adddf3>
 8002e02:	4622      	mov	r2, r4
 8002e04:	462b      	mov	r3, r5
 8002e06:	f7fd fb9f 	bl	8000548 <__aeabi_dmul>
 8002e0a:	a357      	add	r3, pc, #348	; (adr r3, 8002f68 <__ieee754_pow+0x9f0>)
 8002e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e10:	f7fd f9e6 	bl	80001e0 <__aeabi_dsub>
 8002e14:	4622      	mov	r2, r4
 8002e16:	462b      	mov	r3, r5
 8002e18:	f7fd fb96 	bl	8000548 <__aeabi_dmul>
 8002e1c:	a354      	add	r3, pc, #336	; (adr r3, 8002f70 <__ieee754_pow+0x9f8>)
 8002e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e22:	f7fd f9df 	bl	80001e4 <__adddf3>
 8002e26:	4622      	mov	r2, r4
 8002e28:	462b      	mov	r3, r5
 8002e2a:	f7fd fb8d 	bl	8000548 <__aeabi_dmul>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4640      	mov	r0, r8
 8002e34:	4649      	mov	r1, r9
 8002e36:	f7fd f9d3 	bl	80001e0 <__aeabi_dsub>
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	460d      	mov	r5, r1
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4640      	mov	r0, r8
 8002e44:	4649      	mov	r1, r9
 8002e46:	f7fd fb7f 	bl	8000548 <__aeabi_dmul>
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	e9cd 0100 	strd	r0, r1, [sp]
 8002e50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e54:	4620      	mov	r0, r4
 8002e56:	4629      	mov	r1, r5
 8002e58:	f7fd f9c2 	bl	80001e0 <__aeabi_dsub>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002e64:	f7fd fc9a 	bl	800079c <__aeabi_ddiv>
 8002e68:	4632      	mov	r2, r6
 8002e6a:	4604      	mov	r4, r0
 8002e6c:	460d      	mov	r5, r1
 8002e6e:	463b      	mov	r3, r7
 8002e70:	4640      	mov	r0, r8
 8002e72:	4649      	mov	r1, r9
 8002e74:	f7fd fb68 	bl	8000548 <__aeabi_dmul>
 8002e78:	4632      	mov	r2, r6
 8002e7a:	463b      	mov	r3, r7
 8002e7c:	f7fd f9b2 	bl	80001e4 <__adddf3>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4620      	mov	r0, r4
 8002e86:	4629      	mov	r1, r5
 8002e88:	f7fd f9aa 	bl	80001e0 <__aeabi_dsub>
 8002e8c:	4642      	mov	r2, r8
 8002e8e:	464b      	mov	r3, r9
 8002e90:	f7fd f9a6 	bl	80001e0 <__aeabi_dsub>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	2000      	movs	r0, #0
 8002e9a:	493b      	ldr	r1, [pc, #236]	; (8002f88 <__ieee754_pow+0xa10>)
 8002e9c:	f7fd f9a0 	bl	80001e0 <__aeabi_dsub>
 8002ea0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8002ea4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	da31      	bge.n	8002f12 <__ieee754_pow+0x99a>
 8002eae:	4650      	mov	r0, sl
 8002eb0:	ec43 2b10 	vmov	d0, r2, r3
 8002eb4:	f000 f9c4 	bl	8003240 <scalbn>
 8002eb8:	ec51 0b10 	vmov	r0, r1, d0
 8002ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002ec0:	f7ff bbf1 	b.w	80026a6 <__ieee754_pow+0x12e>
 8002ec4:	4b31      	ldr	r3, [pc, #196]	; (8002f8c <__ieee754_pow+0xa14>)
 8002ec6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8002eca:	429e      	cmp	r6, r3
 8002ecc:	f77f af0c 	ble.w	8002ce8 <__ieee754_pow+0x770>
 8002ed0:	4b2f      	ldr	r3, [pc, #188]	; (8002f90 <__ieee754_pow+0xa18>)
 8002ed2:	440b      	add	r3, r1
 8002ed4:	4303      	orrs	r3, r0
 8002ed6:	d00b      	beq.n	8002ef0 <__ieee754_pow+0x978>
 8002ed8:	a327      	add	r3, pc, #156	; (adr r3, 8002f78 <__ieee754_pow+0xa00>)
 8002eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ee2:	f7fd fb31 	bl	8000548 <__aeabi_dmul>
 8002ee6:	a324      	add	r3, pc, #144	; (adr r3, 8002f78 <__ieee754_pow+0xa00>)
 8002ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eec:	f7ff bbdb 	b.w	80026a6 <__ieee754_pow+0x12e>
 8002ef0:	4622      	mov	r2, r4
 8002ef2:	462b      	mov	r3, r5
 8002ef4:	f7fd f974 	bl	80001e0 <__aeabi_dsub>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4640      	mov	r0, r8
 8002efe:	4649      	mov	r1, r9
 8002f00:	f7fd fd9e 	bl	8000a40 <__aeabi_dcmple>
 8002f04:	2800      	cmp	r0, #0
 8002f06:	f43f aeef 	beq.w	8002ce8 <__ieee754_pow+0x770>
 8002f0a:	e7e5      	b.n	8002ed8 <__ieee754_pow+0x960>
 8002f0c:	f04f 0a00 	mov.w	sl, #0
 8002f10:	e716      	b.n	8002d40 <__ieee754_pow+0x7c8>
 8002f12:	4621      	mov	r1, r4
 8002f14:	e7d2      	b.n	8002ebc <__ieee754_pow+0x944>
 8002f16:	2000      	movs	r0, #0
 8002f18:	491b      	ldr	r1, [pc, #108]	; (8002f88 <__ieee754_pow+0xa10>)
 8002f1a:	f7ff bb8d 	b.w	8002638 <__ieee754_pow+0xc0>
 8002f1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002f22:	f7ff bb89 	b.w	8002638 <__ieee754_pow+0xc0>
 8002f26:	4630      	mov	r0, r6
 8002f28:	4639      	mov	r1, r7
 8002f2a:	f7ff bb85 	b.w	8002638 <__ieee754_pow+0xc0>
 8002f2e:	4693      	mov	fp, r2
 8002f30:	f7ff bb96 	b.w	8002660 <__ieee754_pow+0xe8>
 8002f34:	f3af 8000 	nop.w
 8002f38:	00000000 	.word	0x00000000
 8002f3c:	3fe62e43 	.word	0x3fe62e43
 8002f40:	fefa39ef 	.word	0xfefa39ef
 8002f44:	3fe62e42 	.word	0x3fe62e42
 8002f48:	0ca86c39 	.word	0x0ca86c39
 8002f4c:	be205c61 	.word	0xbe205c61
 8002f50:	72bea4d0 	.word	0x72bea4d0
 8002f54:	3e663769 	.word	0x3e663769
 8002f58:	c5d26bf1 	.word	0xc5d26bf1
 8002f5c:	3ebbbd41 	.word	0x3ebbbd41
 8002f60:	af25de2c 	.word	0xaf25de2c
 8002f64:	3f11566a 	.word	0x3f11566a
 8002f68:	16bebd93 	.word	0x16bebd93
 8002f6c:	3f66c16c 	.word	0x3f66c16c
 8002f70:	5555553e 	.word	0x5555553e
 8002f74:	3fc55555 	.word	0x3fc55555
 8002f78:	c2f8f359 	.word	0xc2f8f359
 8002f7c:	01a56e1f 	.word	0x01a56e1f
 8002f80:	3fe00000 	.word	0x3fe00000
 8002f84:	000fffff 	.word	0x000fffff
 8002f88:	3ff00000 	.word	0x3ff00000
 8002f8c:	4090cbff 	.word	0x4090cbff
 8002f90:	3f6f3400 	.word	0x3f6f3400
 8002f94:	652b82fe 	.word	0x652b82fe
 8002f98:	3c971547 	.word	0x3c971547

08002f9c <__ieee754_sqrt>:
 8002f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fa0:	ec55 4b10 	vmov	r4, r5, d0
 8002fa4:	4e54      	ldr	r6, [pc, #336]	; (80030f8 <__ieee754_sqrt+0x15c>)
 8002fa6:	43ae      	bics	r6, r5
 8002fa8:	ee10 0a10 	vmov	r0, s0
 8002fac:	462b      	mov	r3, r5
 8002fae:	462a      	mov	r2, r5
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	d113      	bne.n	8002fdc <__ieee754_sqrt+0x40>
 8002fb4:	ee10 2a10 	vmov	r2, s0
 8002fb8:	462b      	mov	r3, r5
 8002fba:	ee10 0a10 	vmov	r0, s0
 8002fbe:	4629      	mov	r1, r5
 8002fc0:	f7fd fac2 	bl	8000548 <__aeabi_dmul>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4620      	mov	r0, r4
 8002fca:	4629      	mov	r1, r5
 8002fcc:	f7fd f90a 	bl	80001e4 <__adddf3>
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	460d      	mov	r5, r1
 8002fd4:	ec45 4b10 	vmov	d0, r4, r5
 8002fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fdc:	2d00      	cmp	r5, #0
 8002fde:	dc10      	bgt.n	8003002 <__ieee754_sqrt+0x66>
 8002fe0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8002fe4:	4330      	orrs	r0, r6
 8002fe6:	d0f5      	beq.n	8002fd4 <__ieee754_sqrt+0x38>
 8002fe8:	b15d      	cbz	r5, 8003002 <__ieee754_sqrt+0x66>
 8002fea:	ee10 2a10 	vmov	r2, s0
 8002fee:	462b      	mov	r3, r5
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	4629      	mov	r1, r5
 8002ff4:	f7fd f8f4 	bl	80001e0 <__aeabi_dsub>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	f7fd fbce 	bl	800079c <__aeabi_ddiv>
 8003000:	e7e6      	b.n	8002fd0 <__ieee754_sqrt+0x34>
 8003002:	151b      	asrs	r3, r3, #20
 8003004:	d10c      	bne.n	8003020 <__ieee754_sqrt+0x84>
 8003006:	2a00      	cmp	r2, #0
 8003008:	d06d      	beq.n	80030e6 <__ieee754_sqrt+0x14a>
 800300a:	2000      	movs	r0, #0
 800300c:	02d6      	lsls	r6, r2, #11
 800300e:	d56e      	bpl.n	80030ee <__ieee754_sqrt+0x152>
 8003010:	1e44      	subs	r4, r0, #1
 8003012:	1b1b      	subs	r3, r3, r4
 8003014:	f1c0 0420 	rsb	r4, r0, #32
 8003018:	fa21 f404 	lsr.w	r4, r1, r4
 800301c:	4322      	orrs	r2, r4
 800301e:	4081      	lsls	r1, r0
 8003020:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003024:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003028:	07dd      	lsls	r5, r3, #31
 800302a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800302e:	bf42      	ittt	mi
 8003030:	0052      	lslmi	r2, r2, #1
 8003032:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8003036:	0049      	lslmi	r1, r1, #1
 8003038:	1058      	asrs	r0, r3, #1
 800303a:	2500      	movs	r5, #0
 800303c:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8003040:	441a      	add	r2, r3
 8003042:	0049      	lsls	r1, r1, #1
 8003044:	2316      	movs	r3, #22
 8003046:	462c      	mov	r4, r5
 8003048:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800304c:	19a7      	adds	r7, r4, r6
 800304e:	4297      	cmp	r7, r2
 8003050:	bfde      	ittt	le
 8003052:	1bd2      	suble	r2, r2, r7
 8003054:	19bc      	addle	r4, r7, r6
 8003056:	19ad      	addle	r5, r5, r6
 8003058:	0052      	lsls	r2, r2, #1
 800305a:	3b01      	subs	r3, #1
 800305c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8003060:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003064:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003068:	d1f0      	bne.n	800304c <__ieee754_sqrt+0xb0>
 800306a:	f04f 0e20 	mov.w	lr, #32
 800306e:	469c      	mov	ip, r3
 8003070:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003074:	42a2      	cmp	r2, r4
 8003076:	eb06 070c 	add.w	r7, r6, ip
 800307a:	dc02      	bgt.n	8003082 <__ieee754_sqrt+0xe6>
 800307c:	d112      	bne.n	80030a4 <__ieee754_sqrt+0x108>
 800307e:	428f      	cmp	r7, r1
 8003080:	d810      	bhi.n	80030a4 <__ieee754_sqrt+0x108>
 8003082:	2f00      	cmp	r7, #0
 8003084:	eb07 0c06 	add.w	ip, r7, r6
 8003088:	da34      	bge.n	80030f4 <__ieee754_sqrt+0x158>
 800308a:	f1bc 0f00 	cmp.w	ip, #0
 800308e:	db31      	blt.n	80030f4 <__ieee754_sqrt+0x158>
 8003090:	f104 0801 	add.w	r8, r4, #1
 8003094:	1b12      	subs	r2, r2, r4
 8003096:	428f      	cmp	r7, r1
 8003098:	bf88      	it	hi
 800309a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800309e:	1bc9      	subs	r1, r1, r7
 80030a0:	4433      	add	r3, r6
 80030a2:	4644      	mov	r4, r8
 80030a4:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 80030a8:	f1be 0e01 	subs.w	lr, lr, #1
 80030ac:	443a      	add	r2, r7
 80030ae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80030b2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80030b6:	d1dd      	bne.n	8003074 <__ieee754_sqrt+0xd8>
 80030b8:	430a      	orrs	r2, r1
 80030ba:	d006      	beq.n	80030ca <__ieee754_sqrt+0x12e>
 80030bc:	1c5c      	adds	r4, r3, #1
 80030be:	bf13      	iteet	ne
 80030c0:	3301      	addne	r3, #1
 80030c2:	3501      	addeq	r5, #1
 80030c4:	4673      	moveq	r3, lr
 80030c6:	f023 0301 	bicne.w	r3, r3, #1
 80030ca:	106a      	asrs	r2, r5, #1
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	07e9      	lsls	r1, r5, #31
 80030d0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80030d4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80030d8:	bf48      	it	mi
 80030da:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80030de:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80030e2:	461c      	mov	r4, r3
 80030e4:	e776      	b.n	8002fd4 <__ieee754_sqrt+0x38>
 80030e6:	0aca      	lsrs	r2, r1, #11
 80030e8:	3b15      	subs	r3, #21
 80030ea:	0549      	lsls	r1, r1, #21
 80030ec:	e78b      	b.n	8003006 <__ieee754_sqrt+0x6a>
 80030ee:	0052      	lsls	r2, r2, #1
 80030f0:	3001      	adds	r0, #1
 80030f2:	e78b      	b.n	800300c <__ieee754_sqrt+0x70>
 80030f4:	46a0      	mov	r8, r4
 80030f6:	e7cd      	b.n	8003094 <__ieee754_sqrt+0xf8>
 80030f8:	7ff00000 	.word	0x7ff00000

080030fc <fabs>:
 80030fc:	ec53 2b10 	vmov	r2, r3, d0
 8003100:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003104:	ec43 2b10 	vmov	d0, r2, r3
 8003108:	4770      	bx	lr

0800310a <finite>:
 800310a:	ee10 3a90 	vmov	r3, s1
 800310e:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8003112:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003116:	0fc0      	lsrs	r0, r0, #31
 8003118:	4770      	bx	lr

0800311a <matherr>:
 800311a:	2000      	movs	r0, #0
 800311c:	4770      	bx	lr
	...

08003120 <nan>:
 8003120:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8003128 <nan+0x8>
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	00000000 	.word	0x00000000
 800312c:	7ff80000 	.word	0x7ff80000

08003130 <rint>:
 8003130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003132:	ec51 0b10 	vmov	r0, r1, d0
 8003136:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800313a:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 800313e:	2e13      	cmp	r6, #19
 8003140:	ee10 7a10 	vmov	r7, s0
 8003144:	460b      	mov	r3, r1
 8003146:	4602      	mov	r2, r0
 8003148:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800314c:	dc58      	bgt.n	8003200 <rint+0xd0>
 800314e:	2e00      	cmp	r6, #0
 8003150:	da2b      	bge.n	80031aa <rint+0x7a>
 8003152:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8003156:	4302      	orrs	r2, r0
 8003158:	d023      	beq.n	80031a2 <rint+0x72>
 800315a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800315e:	4302      	orrs	r2, r0
 8003160:	4251      	negs	r1, r2
 8003162:	4311      	orrs	r1, r2
 8003164:	0b09      	lsrs	r1, r1, #12
 8003166:	0c5b      	lsrs	r3, r3, #17
 8003168:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 800316c:	045b      	lsls	r3, r3, #17
 800316e:	ea41 0703 	orr.w	r7, r1, r3
 8003172:	4b31      	ldr	r3, [pc, #196]	; (8003238 <rint+0x108>)
 8003174:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003178:	4639      	mov	r1, r7
 800317a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800317e:	ee10 0a10 	vmov	r0, s0
 8003182:	4632      	mov	r2, r6
 8003184:	463b      	mov	r3, r7
 8003186:	f7fd f82d 	bl	80001e4 <__adddf3>
 800318a:	e9cd 0100 	strd	r0, r1, [sp]
 800318e:	463b      	mov	r3, r7
 8003190:	4632      	mov	r2, r6
 8003192:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003196:	f7fd f823 	bl	80001e0 <__aeabi_dsub>
 800319a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800319e:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 80031a2:	ec41 0b10 	vmov	d0, r0, r1
 80031a6:	b003      	add	sp, #12
 80031a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031aa:	4c24      	ldr	r4, [pc, #144]	; (800323c <rint+0x10c>)
 80031ac:	4134      	asrs	r4, r6
 80031ae:	ea01 0704 	and.w	r7, r1, r4
 80031b2:	4307      	orrs	r7, r0
 80031b4:	d0f5      	beq.n	80031a2 <rint+0x72>
 80031b6:	0861      	lsrs	r1, r4, #1
 80031b8:	ea03 0001 	and.w	r0, r3, r1
 80031bc:	4302      	orrs	r2, r0
 80031be:	d00b      	beq.n	80031d8 <rint+0xa8>
 80031c0:	ea23 0101 	bic.w	r1, r3, r1
 80031c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031c8:	2e13      	cmp	r6, #19
 80031ca:	fa43 f306 	asr.w	r3, r3, r6
 80031ce:	bf0c      	ite	eq
 80031d0:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 80031d4:	2200      	movne	r2, #0
 80031d6:	430b      	orrs	r3, r1
 80031d8:	4619      	mov	r1, r3
 80031da:	4b17      	ldr	r3, [pc, #92]	; (8003238 <rint+0x108>)
 80031dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80031e0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80031e4:	4610      	mov	r0, r2
 80031e6:	462b      	mov	r3, r5
 80031e8:	4622      	mov	r2, r4
 80031ea:	f7fc fffb 	bl	80001e4 <__adddf3>
 80031ee:	e9cd 0100 	strd	r0, r1, [sp]
 80031f2:	4622      	mov	r2, r4
 80031f4:	462b      	mov	r3, r5
 80031f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80031fa:	f7fc fff1 	bl	80001e0 <__aeabi_dsub>
 80031fe:	e7d0      	b.n	80031a2 <rint+0x72>
 8003200:	2e33      	cmp	r6, #51	; 0x33
 8003202:	dd08      	ble.n	8003216 <rint+0xe6>
 8003204:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003208:	d1cb      	bne.n	80031a2 <rint+0x72>
 800320a:	ee10 2a10 	vmov	r2, s0
 800320e:	460b      	mov	r3, r1
 8003210:	f7fc ffe8 	bl	80001e4 <__adddf3>
 8003214:	e7c5      	b.n	80031a2 <rint+0x72>
 8003216:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800321a:	f04f 34ff 	mov.w	r4, #4294967295
 800321e:	40f4      	lsrs	r4, r6
 8003220:	4220      	tst	r0, r4
 8003222:	d0be      	beq.n	80031a2 <rint+0x72>
 8003224:	0861      	lsrs	r1, r4, #1
 8003226:	420f      	tst	r7, r1
 8003228:	bf1f      	itttt	ne
 800322a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800322e:	ea27 0101 	bicne.w	r1, r7, r1
 8003232:	4132      	asrne	r2, r6
 8003234:	430a      	orrne	r2, r1
 8003236:	e7cf      	b.n	80031d8 <rint+0xa8>
 8003238:	080033c8 	.word	0x080033c8
 800323c:	000fffff 	.word	0x000fffff

08003240 <scalbn>:
 8003240:	b570      	push	{r4, r5, r6, lr}
 8003242:	ec55 4b10 	vmov	r4, r5, d0
 8003246:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800324a:	4606      	mov	r6, r0
 800324c:	462b      	mov	r3, r5
 800324e:	b9b2      	cbnz	r2, 800327e <scalbn+0x3e>
 8003250:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003254:	4323      	orrs	r3, r4
 8003256:	d03c      	beq.n	80032d2 <scalbn+0x92>
 8003258:	2200      	movs	r2, #0
 800325a:	4b33      	ldr	r3, [pc, #204]	; (8003328 <scalbn+0xe8>)
 800325c:	4629      	mov	r1, r5
 800325e:	ee10 0a10 	vmov	r0, s0
 8003262:	f7fd f971 	bl	8000548 <__aeabi_dmul>
 8003266:	4a31      	ldr	r2, [pc, #196]	; (800332c <scalbn+0xec>)
 8003268:	4296      	cmp	r6, r2
 800326a:	4604      	mov	r4, r0
 800326c:	460d      	mov	r5, r1
 800326e:	460b      	mov	r3, r1
 8003270:	da13      	bge.n	800329a <scalbn+0x5a>
 8003272:	a329      	add	r3, pc, #164	; (adr r3, 8003318 <scalbn+0xd8>)
 8003274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003278:	f7fd f966 	bl	8000548 <__aeabi_dmul>
 800327c:	e00a      	b.n	8003294 <scalbn+0x54>
 800327e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003282:	428a      	cmp	r2, r1
 8003284:	d10c      	bne.n	80032a0 <scalbn+0x60>
 8003286:	ee10 2a10 	vmov	r2, s0
 800328a:	462b      	mov	r3, r5
 800328c:	4620      	mov	r0, r4
 800328e:	4629      	mov	r1, r5
 8003290:	f7fc ffa8 	bl	80001e4 <__adddf3>
 8003294:	4604      	mov	r4, r0
 8003296:	460d      	mov	r5, r1
 8003298:	e01b      	b.n	80032d2 <scalbn+0x92>
 800329a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800329e:	3a36      	subs	r2, #54	; 0x36
 80032a0:	4432      	add	r2, r6
 80032a2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80032a6:	428a      	cmp	r2, r1
 80032a8:	dd0b      	ble.n	80032c2 <scalbn+0x82>
 80032aa:	ec45 4b11 	vmov	d1, r4, r5
 80032ae:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8003320 <scalbn+0xe0>
 80032b2:	f000 f83f 	bl	8003334 <copysign>
 80032b6:	a31a      	add	r3, pc, #104	; (adr r3, 8003320 <scalbn+0xe0>)
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	ec51 0b10 	vmov	r0, r1, d0
 80032c0:	e7da      	b.n	8003278 <scalbn+0x38>
 80032c2:	2a00      	cmp	r2, #0
 80032c4:	dd08      	ble.n	80032d8 <scalbn+0x98>
 80032c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80032ca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80032ce:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80032d2:	ec45 4b10 	vmov	d0, r4, r5
 80032d6:	bd70      	pop	{r4, r5, r6, pc}
 80032d8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80032dc:	da0d      	bge.n	80032fa <scalbn+0xba>
 80032de:	f24c 3350 	movw	r3, #50000	; 0xc350
 80032e2:	429e      	cmp	r6, r3
 80032e4:	ec45 4b11 	vmov	d1, r4, r5
 80032e8:	dce1      	bgt.n	80032ae <scalbn+0x6e>
 80032ea:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8003318 <scalbn+0xd8>
 80032ee:	f000 f821 	bl	8003334 <copysign>
 80032f2:	a309      	add	r3, pc, #36	; (adr r3, 8003318 <scalbn+0xd8>)
 80032f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f8:	e7e0      	b.n	80032bc <scalbn+0x7c>
 80032fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80032fe:	3236      	adds	r2, #54	; 0x36
 8003300:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003304:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003308:	4620      	mov	r0, r4
 800330a:	4629      	mov	r1, r5
 800330c:	2200      	movs	r2, #0
 800330e:	4b08      	ldr	r3, [pc, #32]	; (8003330 <scalbn+0xf0>)
 8003310:	e7b2      	b.n	8003278 <scalbn+0x38>
 8003312:	bf00      	nop
 8003314:	f3af 8000 	nop.w
 8003318:	c2f8f359 	.word	0xc2f8f359
 800331c:	01a56e1f 	.word	0x01a56e1f
 8003320:	8800759c 	.word	0x8800759c
 8003324:	7e37e43c 	.word	0x7e37e43c
 8003328:	43500000 	.word	0x43500000
 800332c:	ffff3cb0 	.word	0xffff3cb0
 8003330:	3c900000 	.word	0x3c900000

08003334 <copysign>:
 8003334:	ec53 2b10 	vmov	r2, r3, d0
 8003338:	ee11 0a90 	vmov	r0, s3
 800333c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003340:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8003344:	ea41 0300 	orr.w	r3, r1, r0
 8003348:	ec43 2b10 	vmov	d0, r2, r3
 800334c:	4770      	bx	lr
	...

08003350 <__errno>:
 8003350:	4b01      	ldr	r3, [pc, #4]	; (8003358 <__errno+0x8>)
 8003352:	6818      	ldr	r0, [r3, #0]
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	20000010 	.word	0x20000010

0800335c <_init>:
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	bf00      	nop
 8003360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003362:	bc08      	pop	{r3}
 8003364:	469e      	mov	lr, r3
 8003366:	4770      	bx	lr

08003368 <_fini>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	bf00      	nop
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr
